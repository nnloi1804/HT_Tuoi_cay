
He_Thong_Tuoi_Cay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004858  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b94  08004b94  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b9c  08004b9c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08004ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000002c  08004bd0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004bd0  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d41b  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d30  00000000  00000000  0002d477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002f1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  0002fda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174b4  00000000  00000000  00030918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0ed  00000000  00000000  00047dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094217  00000000  00000000  00055eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea0d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031ec  00000000  00000000  000ea120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080049d4 	.word	0x080049d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	080049d4 	.word	0x080049d4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <DS1307_Init+0x1c>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 80004e6:	2000      	movs	r0, #0
 80004e8:	f000 f806 	bl	80004f8 <DS1307_SetClockHalt>
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000048 	.word	0x20000048

080004f8 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <DS1307_SetClockHalt+0x14>
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	e000      	b.n	800050e <DS1307_SetClockHalt+0x16>
 800050c:	2300      	movs	r3, #0
 800050e:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8000510:	2000      	movs	r0, #0
 8000512:	f000 f831 	bl	8000578 <DS1307_GetRegByte>
 8000516:	4603      	mov	r3, r0
 8000518:	b25b      	sxtb	r3, r3
 800051a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800051e:	b25a      	sxtb	r2, r3
 8000520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000524:	4313      	orrs	r3, r2
 8000526:	b25b      	sxtb	r3, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	4619      	mov	r1, r3
 800052c:	2000      	movs	r0, #0
 800052e:	f000 f805 	bl	800053c <DS1307_SetRegByte>
}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af02      	add	r7, sp, #8
 8000542:	4603      	mov	r3, r0
 8000544:	460a      	mov	r2, r1
 8000546:	71fb      	strb	r3, [r7, #7]
 8000548:	4613      	mov	r3, r2
 800054a:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	733b      	strb	r3, [r7, #12]
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <DS1307_SetRegByte+0x38>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	f107 020c 	add.w	r2, r7, #12
 800055c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2302      	movs	r3, #2
 8000564:	21d0      	movs	r1, #208	; 0xd0
 8000566:	f002 fc01 	bl	8002d6c <HAL_I2C_Master_Transmit>
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000048 	.word	0x20000048

08000578 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <DS1307_GetRegByte+0x40>)
 8000584:	6818      	ldr	r0, [r3, #0]
 8000586:	1dfa      	adds	r2, r7, #7
 8000588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	21d0      	movs	r1, #208	; 0xd0
 8000592:	f002 fbeb 	bl	8002d6c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <DS1307_GetRegByte+0x40>)
 8000598:	6818      	ldr	r0, [r3, #0]
 800059a:	f107 020f 	add.w	r2, r7, #15
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	2301      	movs	r3, #1
 80005a6:	21d0      	movs	r1, #208	; 0xd0
 80005a8:	f002 fcde 	bl	8002f68 <HAL_I2C_Master_Receive>
	return val;
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000048 	.word	0x20000048

080005bc <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 80005c0:	2003      	movs	r0, #3
 80005c2:	f7ff ffd9 	bl	8000578 <DS1307_GetRegByte>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f867 	bl	800069c <DS1307_DecodeBCD>
 80005ce:	4603      	mov	r3, r0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 80005d8:	2004      	movs	r0, #4
 80005da:	f7ff ffcd 	bl	8000578 <DS1307_GetRegByte>
 80005de:	4603      	mov	r3, r0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f85b 	bl	800069c <DS1307_DecodeBCD>
 80005e6:	4603      	mov	r3, r0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	bd80      	pop	{r7, pc}

080005ec <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 80005f0:	2005      	movs	r0, #5
 80005f2:	f7ff ffc1 	bl	8000578 <DS1307_GetRegByte>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f84f 	bl	800069c <DS1307_DecodeBCD>
 80005fe:	4603      	mov	r3, r0
}
 8000600:	4618      	mov	r0, r3
 8000602:	bd80      	pop	{r7, pc}

08000604 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 800060a:	2010      	movs	r0, #16
 800060c:	f7ff ffb4 	bl	8000578 <DS1307_GetRegByte>
 8000610:	4603      	mov	r3, r0
 8000612:	b29b      	uxth	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	4413      	add	r3, r2
 800061a:	461a      	mov	r2, r3
 800061c:	0091      	lsls	r1, r2, #2
 800061e:	461a      	mov	r2, r3
 8000620:	460b      	mov	r3, r1
 8000622:	4413      	add	r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8000628:	2006      	movs	r0, #6
 800062a:	f7ff ffa5 	bl	8000578 <DS1307_GetRegByte>
 800062e:	4603      	mov	r3, r0
 8000630:	4618      	mov	r0, r3
 8000632:	f000 f833 	bl	800069c <DS1307_DecodeBCD>
 8000636:	4603      	mov	r3, r0
 8000638:	b29a      	uxth	r2, r3
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	4413      	add	r3, r2
 800063e:	b29b      	uxth	r3, r3
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 800064c:	2002      	movs	r0, #2
 800064e:	f7ff ff93 	bl	8000578 <DS1307_GetRegByte>
 8000652:	4603      	mov	r3, r0
 8000654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f81e 	bl	800069c <DS1307_DecodeBCD>
 8000660:	4603      	mov	r3, r0
}
 8000662:	4618      	mov	r0, r3
 8000664:	bd80      	pop	{r7, pc}

08000666 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 800066a:	2001      	movs	r0, #1
 800066c:	f7ff ff84 	bl	8000578 <DS1307_GetRegByte>
 8000670:	4603      	mov	r3, r0
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f812 	bl	800069c <DS1307_DecodeBCD>
 8000678:	4603      	mov	r3, r0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}

0800067e <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8000682:	2000      	movs	r0, #0
 8000684:	f7ff ff78 	bl	8000578 <DS1307_GetRegByte>
 8000688:	4603      	mov	r3, r0
 800068a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f803 	bl	800069c <DS1307_DecodeBCD>
 8000696:	4603      	mov	r3, r0
}
 8000698:	4618      	mov	r0, r3
 800069a:	bd80      	pop	{r7, pc}

0800069c <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	091b      	lsrs	r3, r3, #4
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	0092      	lsls	r2, r2, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4413      	add	r3, r2
 80006c0:	b2db      	uxtb	r3, r3
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80006da:	4a38      	ldr	r2, [pc, #224]	; (80007bc <HD44780_Init+0xec>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80006e0:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <HD44780_Init+0xf0>)
 80006e2:	2208      	movs	r2, #8
 80006e4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80006e6:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <HD44780_Init+0xf4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80006ec:	4b33      	ldr	r3, [pc, #204]	; (80007bc <HD44780_Init+0xec>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d907      	bls.n	8000704 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80006f4:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <HD44780_Init+0xf4>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	f043 0308 	orr.w	r3, r3, #8
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <HD44780_Init+0xf4>)
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	e006      	b.n	8000712 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000704:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <HD44780_Init+0xf4>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <HD44780_Init+0xf4>)
 8000710:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000712:	f000 f993 	bl	8000a3c <DelayInit>
  HAL_Delay(50);
 8000716:	2032      	movs	r0, #50	; 0x32
 8000718:	f001 fb42 	bl	8001da0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <HD44780_Init+0xf0>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f000 f951 	bl	80009c8 <ExpanderWrite>
  HAL_Delay(1000);
 8000726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800072a:	f001 fb39 	bl	8001da0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800072e:	2030      	movs	r0, #48	; 0x30
 8000730:	f000 f938 	bl	80009a4 <Write4Bits>
  DelayUS(4500);
 8000734:	f241 1094 	movw	r0, #4500	; 0x1194
 8000738:	f000 f9aa 	bl	8000a90 <DelayUS>

  Write4Bits(0x03 << 4);
 800073c:	2030      	movs	r0, #48	; 0x30
 800073e:	f000 f931 	bl	80009a4 <Write4Bits>
  DelayUS(4500);
 8000742:	f241 1094 	movw	r0, #4500	; 0x1194
 8000746:	f000 f9a3 	bl	8000a90 <DelayUS>

  Write4Bits(0x03 << 4);
 800074a:	2030      	movs	r0, #48	; 0x30
 800074c:	f000 f92a 	bl	80009a4 <Write4Bits>
  DelayUS(4500);
 8000750:	f241 1094 	movw	r0, #4500	; 0x1194
 8000754:	f000 f99c 	bl	8000a90 <DelayUS>

  Write4Bits(0x02 << 4);
 8000758:	2020      	movs	r0, #32
 800075a:	f000 f923 	bl	80009a4 <Write4Bits>
  DelayUS(100);
 800075e:	2064      	movs	r0, #100	; 0x64
 8000760:	f000 f996 	bl	8000a90 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <HD44780_Init+0xf4>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	f043 0320 	orr.w	r3, r3, #32
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f8db 	bl	800092a <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HD44780_Init+0xf8>)
 8000776:	2204      	movs	r2, #4
 8000778:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800077a:	f000 f875 	bl	8000868 <HD44780_Display>
  HD44780_Clear();
 800077e:	f000 f82b 	bl	80007d8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HD44780_Init+0xfc>)
 8000784:	2202      	movs	r2, #2
 8000786:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <HD44780_Init+0xfc>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	b2db      	uxtb	r3, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f8c9 	bl	800092a <SendCommand>
  DelayUS(4500);
 8000798:	f241 1094 	movw	r0, #4500	; 0x1194
 800079c:	f000 f978 	bl	8000a90 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80007a0:	490b      	ldr	r1, [pc, #44]	; (80007d0 <HD44780_Init+0x100>)
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 f876 	bl	8000894 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80007a8:	490a      	ldr	r1, [pc, #40]	; (80007d4 <HD44780_Init+0x104>)
 80007aa:	2001      	movs	r0, #1
 80007ac:	f000 f872 	bl	8000894 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80007b0:	f000 f81d 	bl	80007ee <HD44780_Home>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000004f 	.word	0x2000004f
 80007c0:	20000050 	.word	0x20000050
 80007c4:	2000004c 	.word	0x2000004c
 80007c8:	2000004d 	.word	0x2000004d
 80007cc:	2000004e 	.word	0x2000004e
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000008 	.word	0x20000008

080007d8 <HD44780_Clear>:

void HD44780_Clear()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80007dc:	2001      	movs	r0, #1
 80007de:	f000 f8a4 	bl	800092a <SendCommand>
  DelayUS(2000);
 80007e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007e6:	f000 f953 	bl	8000a90 <DelayUS>
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HD44780_Home>:

void HD44780_Home()
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80007f2:	2002      	movs	r0, #2
 80007f4:	f000 f899 	bl	800092a <SendCommand>
  DelayUS(2000);
 80007f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007fc:	f000 f948 	bl	8000a90 <DelayUS>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b087      	sub	sp, #28
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	460a      	mov	r2, r1
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	4613      	mov	r3, r2
 8000812:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HD44780_SetCursor+0x5c>)
 8000816:	f107 0408 	add.w	r4, r7, #8
 800081a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800081c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <HD44780_SetCursor+0x60>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	79ba      	ldrb	r2, [r7, #6]
 8000826:	429a      	cmp	r2, r3
 8000828:	d303      	bcc.n	8000832 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HD44780_SetCursor+0x60>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	3b01      	subs	r3, #1
 8000830:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	3318      	adds	r3, #24
 8000838:	443b      	add	r3, r7
 800083a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800083e:	b2da      	uxtb	r2, r3
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4413      	add	r3, r2
 8000844:	b2db      	uxtb	r3, r3
 8000846:	b25b      	sxtb	r3, r3
 8000848:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800084c:	b25b      	sxtb	r3, r3
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f86a 	bl	800092a <SendCommand>
}
 8000856:	bf00      	nop
 8000858:	371c      	adds	r7, #28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	bf00      	nop
 8000860:	080049ec 	.word	0x080049ec
 8000864:	2000004f 	.word	0x2000004f

08000868 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HD44780_Display+0x28>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HD44780_Display+0x28>)
 8000878:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HD44780_Display+0x28>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4618      	mov	r0, r3
 8000886:	f000 f850 	bl	800092a <SendCommand>
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000004d 	.word	0x2000004d

08000894 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f837 	bl	800092a <SendCommand>
  for (int i=0; i<8; i++)
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	e009      	b.n	80008d6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	683a      	ldr	r2, [r7, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f83b 	bl	8000946 <SendChar>
  for (int i=0; i<8; i++)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3301      	adds	r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2b07      	cmp	r3, #7
 80008da:	ddf2      	ble.n	80008c2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f827 	bl	8000946 <SendChar>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000908:	e006      	b.n	8000918 <HD44780_PrintStr+0x18>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	607a      	str	r2, [r7, #4]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f817 	bl	8000946 <SendChar>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1f4      	bne.n	800090a <HD44780_PrintStr+0xa>
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f000 f812 	bl	8000962 <Send>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f804 	bl	8000962 <Send>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	460a      	mov	r2, r1
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	4613      	mov	r3, r2
 8000970:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	f023 030f 	bic.w	r3, r3, #15
 8000978:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000980:	7bfa      	ldrb	r2, [r7, #15]
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	4313      	orrs	r3, r2
 8000986:	b2db      	uxtb	r3, r3
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f80b 	bl	80009a4 <Write4Bits>
  Write4Bits((lownib)|mode);
 800098e:	7bba      	ldrb	r2, [r7, #14]
 8000990:	79bb      	ldrb	r3, [r7, #6]
 8000992:	4313      	orrs	r3, r2
 8000994:	b2db      	uxtb	r3, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f804 	bl	80009a4 <Write4Bits>
}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f809 	bl	80009c8 <ExpanderWrite>
  PulseEnable(value);
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 f821 	bl	8000a00 <PulseEnable>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <ExpanderWrite+0x30>)
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4313      	orrs	r3, r2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80009de:	f107 020f 	add.w	r2, r7, #15
 80009e2:	230a      	movs	r3, #10
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2301      	movs	r3, #1
 80009e8:	214e      	movs	r1, #78	; 0x4e
 80009ea:	4804      	ldr	r0, [pc, #16]	; (80009fc <ExpanderWrite+0x34>)
 80009ec:	f002 f9be 	bl	8002d6c <HAL_I2C_Master_Transmit>
}
 80009f0:	bf00      	nop
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000050 	.word	0x20000050
 80009fc:	200000c0 	.word	0x200000c0

08000a00 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff ffd8 	bl	80009c8 <ExpanderWrite>
  DelayUS(20);
 8000a18:	2014      	movs	r0, #20
 8000a1a:	f000 f839 	bl	8000a90 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	f023 0304 	bic.w	r3, r3, #4
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ffce 	bl	80009c8 <ExpanderWrite>
  DelayUS(20);
 8000a2c:	2014      	movs	r0, #20
 8000a2e:	f000 f82f 	bl	8000a90 <DelayUS>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <DelayInit>:

static void DelayInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <DelayInit+0x4c>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <DelayInit+0x4c>)
 8000a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a4a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <DelayInit+0x4c>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <DelayInit+0x4c>)
 8000a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a56:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <DelayInit+0x50>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <DelayInit+0x50>)
 8000a5e:	f023 0301 	bic.w	r3, r3, #1
 8000a62:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <DelayInit+0x50>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <DelayInit+0x50>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <DelayInit+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000a76:	bf00      	nop
  __ASM volatile ("NOP");
 8000a78:	bf00      	nop
  __ASM volatile ("NOP");
 8000a7a:	bf00      	nop
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000edf0 	.word	0xe000edf0
 8000a8c:	e0001000 	.word	0xe0001000

08000a90 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <DelayUS+0x44>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <DelayUS+0x48>)
 8000a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa2:	0c9a      	lsrs	r2, r3, #18
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	fb02 f303 	mul.w	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <DelayUS+0x4c>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <DelayUS+0x4c>)
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f6      	bhi.n	8000ab2 <DelayUS+0x22>
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	371c      	adds	r7, #28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000020 	.word	0x20000020
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	e0001000 	.word	0xe0001000

08000ae0 <main>:
char zero = '0';
char char1 = '/';


int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  HAL_Init();
 8000ae4:	f001 f8ea 	bl	8001cbc <HAL_Init>
  SystemClock_Config();
 8000ae8:	f000 fd2e 	bl	8001548 <SystemClock_Config>
  MX_GPIO_Init();
 8000aec:	f000 fe70 	bl	80017d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000af0:	f000 fe44 	bl	800177c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000af4:	f000 fd94 	bl	8001620 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000af8:	f000 fde4 	bl	80016c4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000afc:	f000 fe10 	bl	8001720 <MX_I2C3_Init>
  HD44780_Init(2);
 8000b00:	2002      	movs	r0, #2
 8000b02:	f7ff fde5 	bl	80006d0 <HD44780_Init>
  DS1307_Init(&hi2c3);
 8000b06:	4833      	ldr	r0, [pc, #204]	; (8000bd4 <main+0xf4>)
 8000b08:	f7ff fce6 	bl	80004d8 <DS1307_Init>
	DS1307_SetDayOfWeek(5);
	DS1307_SetHour(12);
	DS1307_SetMinute(57);
	DS1307_SetSecond(00); */

	HD44780_SetCursor(5,0);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2005      	movs	r0, #5
 8000b10:	f7ff fe78 	bl	8000804 <HD44780_SetCursor>
	HD44780_PrintStr("NHOM 5");
 8000b14:	4830      	ldr	r0, [pc, #192]	; (8000bd8 <main+0xf8>)
 8000b16:	f7ff fef3 	bl	8000900 <HD44780_PrintStr>
	HAL_Delay(500);
 8000b1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b1e:	f001 f93f 	bl	8001da0 <HAL_Delay>
	HD44780_SetCursor(1,1);
 8000b22:	2101      	movs	r1, #1
 8000b24:	2001      	movs	r0, #1
 8000b26:	f7ff fe6d 	bl	8000804 <HD44780_SetCursor>
	HD44780_PrintStr("THUC TAP CO SO");
 8000b2a:	482c      	ldr	r0, [pc, #176]	; (8000bdc <main+0xfc>)
 8000b2c:	f7ff fee8 	bl	8000900 <HD44780_PrintStr>
	HAL_Delay(1000);
 8000b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b34:	f001 f934 	bl	8001da0 <HAL_Delay>
	  HD44780_Clear();
 8000b38:	f7ff fe4e 	bl	80007d8 <HD44780_Clear>
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000b3c:	4828      	ldr	r0, [pc, #160]	; (8000be0 <main+0x100>)
 8000b3e:	f001 f997 	bl	8001e70 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000b42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b46:	4826      	ldr	r0, [pc, #152]	; (8000be0 <main+0x100>)
 8000b48:	f001 fa79 	bl	800203e <HAL_ADC_PollForConversion>
	  adc_value = (HAL_ADC_GetValue(&hadc1)*100)/4095;
 8000b4c:	4824      	ldr	r0, [pc, #144]	; (8000be0 <main+0x100>)
 8000b4e:	f001 fb01 	bl	8002154 <HAL_ADC_GetValue>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2264      	movs	r2, #100	; 0x64
 8000b56:	fb03 f202 	mul.w	r2, r3, r2
 8000b5a:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <main+0x104>)
 8000b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b60:	1ad2      	subs	r2, r2, r3
 8000b62:	0852      	lsrs	r2, r2, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	0adb      	lsrs	r3, r3, #11
 8000b68:	4a1f      	ldr	r2, [pc, #124]	; (8000be8 <main+0x108>)
 8000b6a:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000b6c:	481c      	ldr	r0, [pc, #112]	; (8000be0 <main+0x100>)
 8000b6e:	f001 fa33 	bl	8001fd8 <HAL_ADC_Stop>
	  HAL_Delay(100);
 8000b72:	2064      	movs	r0, #100	; 0x64
 8000b74:	f001 f914 	bl	8001da0 <HAL_Delay>


	  	if (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port,BUTTON2_Pin) == 1) {
 8000b78:	2102      	movs	r1, #2
 8000b7a:	481c      	ldr	r0, [pc, #112]	; (8000bec <main+0x10c>)
 8000b7c:	f001 ff80 	bl	8002a80 <HAL_GPIO_ReadPin>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d109      	bne.n	8000b9a <main+0xba>
	  		HD44780_Clear();
 8000b86:	f7ff fe27 	bl	80007d8 <HD44780_Clear>
	  		Realtime();
 8000b8a:	f000 fb89 	bl	80012a0 <Realtime>
	  		HAL_Delay(2000);
 8000b8e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b92:	f001 f905 	bl	8001da0 <HAL_Delay>
	  		HD44780_Clear();
 8000b96:	f7ff fe1f 	bl	80007d8 <HD44780_Clear>
	  	}


	  if (HAL_GPIO_ReadPin(RELAY_GPIO_Port, RELAY_Pin) == 0) {
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	4814      	ldr	r0, [pc, #80]	; (8000bf0 <main+0x110>)
 8000b9e:	f001 ff6f 	bl	8002a80 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d107      	bne.n	8000bb8 <main+0xd8>
			HD44780_SetCursor(10,1);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	200a      	movs	r0, #10
 8000bac:	f7ff fe2a 	bl	8000804 <HD44780_SetCursor>
			HD44780_PrintStr("MB:OFF");
 8000bb0:	4810      	ldr	r0, [pc, #64]	; (8000bf4 <main+0x114>)
 8000bb2:	f7ff fea5 	bl	8000900 <HD44780_PrintStr>
 8000bb6:	e006      	b.n	8000bc6 <main+0xe6>
	  }	 else {
			HD44780_SetCursor(10,1);
 8000bb8:	2101      	movs	r1, #1
 8000bba:	200a      	movs	r0, #10
 8000bbc:	f7ff fe22 	bl	8000804 <HD44780_SetCursor>
			HD44780_PrintStr("MB:ON ");
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <main+0x118>)
 8000bc2:	f7ff fe9d 	bl	8000900 <HD44780_PrintStr>
	  }
	   Do_am();
 8000bc6:	f000 f819 	bl	8000bfc <Do_am>
	  Check_Rain();
 8000bca:	f000 f8cb 	bl	8000d64 <Check_Rain>
	  Real_Hour_Minute();
 8000bce:	f000 fc61 	bl	8001494 <Real_Hour_Minute>
	  HAL_ADC_Start(&hadc1);
 8000bd2:	e7b3      	b.n	8000b3c <main+0x5c>
 8000bd4:	20000114 	.word	0x20000114
 8000bd8:	08004a40 	.word	0x08004a40
 8000bdc:	08004a48 	.word	0x08004a48
 8000be0:	20000078 	.word	0x20000078
 8000be4:	00100101 	.word	0x00100101
 8000be8:	20000054 	.word	0x20000054
 8000bec:	40020800 	.word	0x40020800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	08004a58 	.word	0x08004a58
 8000bf8:	08004a60 	.word	0x08004a60

08000bfc <Do_am>:
  }

}

void Do_am()
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0

	itoa(adc_value, da1, 10);
 8000c02:	4b4d      	ldr	r3, [pc, #308]	; (8000d38 <Do_am+0x13c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	220a      	movs	r2, #10
 8000c08:	494c      	ldr	r1, [pc, #304]	; (8000d3c <Do_am+0x140>)
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 fe96 	bl	800493c <itoa>
	HD44780_SetCursor(0,0);
 8000c10:	2100      	movs	r1, #0
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fdf6 	bl	8000804 <HD44780_SetCursor>
	HD44780_PrintStr("DO AM:");
 8000c18:	4849      	ldr	r0, [pc, #292]	; (8000d40 <Do_am+0x144>)
 8000c1a:	f7ff fe71 	bl	8000900 <HD44780_PrintStr>
	HD44780_SetCursor(6,0);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2006      	movs	r0, #6
 8000c22:	f7ff fdef 	bl	8000804 <HD44780_SetCursor>

	if (adc_value <100) {
 8000c26:	4b44      	ldr	r3, [pc, #272]	; (8000d38 <Do_am+0x13c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b63      	cmp	r3, #99	; 0x63
 8000c2c:	d80a      	bhi.n	8000c44 <Do_am+0x48>
		HD44780_PrintStr(da1);
 8000c2e:	4843      	ldr	r0, [pc, #268]	; (8000d3c <Do_am+0x140>)
 8000c30:	f7ff fe66 	bl	8000900 <HD44780_PrintStr>
		HD44780_SetCursor(8,0);
 8000c34:	2100      	movs	r1, #0
 8000c36:	2008      	movs	r0, #8
 8000c38:	f7ff fde4 	bl	8000804 <HD44780_SetCursor>
		HD44780_PrintStr("% ");
 8000c3c:	4841      	ldr	r0, [pc, #260]	; (8000d44 <Do_am+0x148>)
 8000c3e:	f7ff fe5f 	bl	8000900 <HD44780_PrintStr>
 8000c42:	e009      	b.n	8000c58 <Do_am+0x5c>
	}
	else {
		HD44780_PrintStr(da1);
 8000c44:	483d      	ldr	r0, [pc, #244]	; (8000d3c <Do_am+0x140>)
 8000c46:	f7ff fe5b 	bl	8000900 <HD44780_PrintStr>
		HD44780_SetCursor(9,0);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2009      	movs	r0, #9
 8000c4e:	f7ff fdd9 	bl	8000804 <HD44780_SetCursor>
		HD44780_PrintStr("%");
 8000c52:	483d      	ldr	r0, [pc, #244]	; (8000d48 <Do_am+0x14c>)
 8000c54:	f7ff fe54 	bl	8000900 <HD44780_PrintStr>
		  	  }

	if (adc_value > 80) {
 8000c58:	4b37      	ldr	r3, [pc, #220]	; (8000d38 <Do_am+0x13c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b50      	cmp	r3, #80	; 0x50
 8000c5e:	d967      	bls.n	8000d30 <Do_am+0x134>

		while (adc_value > 80) {
 8000c60:	e060      	b.n	8000d24 <Do_am+0x128>
  		HD44780_Clear();
 8000c62:	f7ff fdb9 	bl	80007d8 <HD44780_Clear>
  		HD44780_SetCursor(3,0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f7ff fdcb 	bl	8000804 <HD44780_SetCursor>
  		HD44780_PrintStr("DO AM THAP");
 8000c6e:	4837      	ldr	r0, [pc, #220]	; (8000d4c <Do_am+0x150>)
 8000c70:	f7ff fe46 	bl	8000900 <HD44780_PrintStr>

  		 waning(3);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 fab7 	bl	80011e8 <waning>

  		HD44780_SetCursor(1,1);
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fdc1 	bl	8000804 <HD44780_SetCursor>
  		HD44780_PrintStr("ONL MAY BOM");
 8000c82:	4833      	ldr	r0, [pc, #204]	; (8000d50 <Do_am+0x154>)
 8000c84:	f7ff fe3c 	bl	8000900 <HD44780_PrintStr>
  		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 1);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2110      	movs	r1, #16
 8000c8c:	4831      	ldr	r0, [pc, #196]	; (8000d54 <Do_am+0x158>)
 8000c8e:	f001 ff0f 	bl	8002ab0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2120      	movs	r1, #32
 8000c96:	4830      	ldr	r0, [pc, #192]	; (8000d58 <Do_am+0x15c>)
 8000c98:	f001 ff0a 	bl	8002ab0 <HAL_GPIO_WritePin>
  		for (int i = 5; i>=1; i--) {
 8000c9c:	2305      	movs	r3, #5
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	e032      	b.n	8000d08 <Do_am+0x10c>
  			char so[5];
  			itoa(i, so, 10);
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	220a      	movs	r2, #10
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f003 fe47 	bl	800493c <itoa>
  			if (i>10) {
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2b0a      	cmp	r3, #10
 8000cb2:	dd13      	ble.n	8000cdc <Do_am+0xe0>
  			HD44780_SetCursor(13,1);
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	200d      	movs	r0, #13
 8000cb8:	f7ff fda4 	bl	8000804 <HD44780_SetCursor>
  			HD44780_PrintStr(so);
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fe1e 	bl	8000900 <HD44780_PrintStr>
  			HAL_Delay(1000);
 8000cc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc8:	f001 f86a 	bl	8001da0 <HAL_Delay>
  			HD44780_SetCursor(15,1);
 8000ccc:	2101      	movs	r1, #1
 8000cce:	200f      	movs	r0, #15
 8000cd0:	f7ff fd98 	bl	8000804 <HD44780_SetCursor>
  			HD44780_PrintStr("s");
 8000cd4:	4821      	ldr	r0, [pc, #132]	; (8000d5c <Do_am+0x160>)
 8000cd6:	f7ff fe13 	bl	8000900 <HD44780_PrintStr>
 8000cda:	e012      	b.n	8000d02 <Do_am+0x106>
  			} else {
  	  			HD44780_SetCursor(13,1);
 8000cdc:	2101      	movs	r1, #1
 8000cde:	200d      	movs	r0, #13
 8000ce0:	f7ff fd90 	bl	8000804 <HD44780_SetCursor>
  	  			HD44780_PrintStr(so);
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe0a 	bl	8000900 <HD44780_PrintStr>
  	  			HAL_Delay(1000);
 8000cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf0:	f001 f856 	bl	8001da0 <HAL_Delay>
  	  			HD44780_SetCursor(14,1);
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	200e      	movs	r0, #14
 8000cf8:	f7ff fd84 	bl	8000804 <HD44780_SetCursor>
  	  			HD44780_PrintStr("s ");
 8000cfc:	4818      	ldr	r0, [pc, #96]	; (8000d60 <Do_am+0x164>)
 8000cfe:	f7ff fdff 	bl	8000900 <HD44780_PrintStr>
  		for (int i = 5; i>=1; i--) {
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	dcc9      	bgt.n	8000ca2 <Do_am+0xa6>
  			}
  		}


  		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2120      	movs	r1, #32
 8000d12:	4811      	ldr	r0, [pc, #68]	; (8000d58 <Do_am+0x15c>)
 8000d14:	f001 fecc 	bl	8002ab0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <Do_am+0x158>)
 8000d1e:	f001 fec7 	bl	8002ab0 <HAL_GPIO_WritePin>

  		break;
 8000d22:	e003      	b.n	8000d2c <Do_am+0x130>
		while (adc_value > 80) {
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <Do_am+0x13c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b50      	cmp	r3, #80	; 0x50
 8000d2a:	d89a      	bhi.n	8000c62 <Do_am+0x66>
		}
		HD44780_Clear();
 8000d2c:	f7ff fd54 	bl	80007d8 <HD44780_Clear>
	}
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000054 	.word	0x20000054
 8000d3c:	2000005c 	.word	0x2000005c
 8000d40:	08004a68 	.word	0x08004a68
 8000d44:	08004a70 	.word	0x08004a70
 8000d48:	08004a74 	.word	0x08004a74
 8000d4c:	08004a78 	.word	0x08004a78
 8000d50:	08004a84 	.word	0x08004a84
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	08004a90 	.word	0x08004a90
 8000d60:	08004a94 	.word	0x08004a94

08000d64 <Check_Rain>:
void Check_Rain()
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0

	uint8_t hour = DS1307_GetHour();
 8000d6a:	f7ff fc6d 	bl	8000648 <DS1307_GetHour>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
	uint8_t minute = DS1307_GetMinute();
 8000d72:	f7ff fc78 	bl	8000666 <DS1307_GetMinute>
 8000d76:	4603      	mov	r3, r0
 8000d78:	71bb      	strb	r3, [r7, #6]
	uint8_t second = DS1307_GetSecond();
 8000d7a:	f7ff fc80 	bl	800067e <DS1307_GetSecond>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	717b      	strb	r3, [r7, #5]

	if (HAL_GPIO_ReadPin(RAIN_GPIO_Port, RAIN_Pin) == 0){
 8000d82:	2102      	movs	r1, #2
 8000d84:	485d      	ldr	r0, [pc, #372]	; (8000efc <Check_Rain+0x198>)
 8000d86:	f001 fe7b 	bl	8002a80 <HAL_GPIO_ReadPin>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d16e      	bne.n	8000e6e <Check_Rain+0x10a>
		HD44780_SetCursor(0,1);
 8000d90:	2101      	movs	r1, #1
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff fd36 	bl	8000804 <HD44780_SetCursor>
		HD44780_PrintStr("CO MUA   ");
 8000d98:	4859      	ldr	r0, [pc, #356]	; (8000f00 <Check_Rain+0x19c>)
 8000d9a:	f7ff fdb1 	bl	8000900 <HD44780_PrintStr>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da4:	4857      	ldr	r0, [pc, #348]	; (8000f04 <Check_Rain+0x1a0>)
 8000da6:	f001 fe83 	bl	8002ab0 <HAL_GPIO_WritePin>
		dem4=1;
 8000daa:	4b57      	ldr	r3, [pc, #348]	; (8000f08 <Check_Rain+0x1a4>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	601a      	str	r2, [r3, #0]
		dem_mua = 1;
 8000db0:	4b56      	ldr	r3, [pc, #344]	; (8000f0c <Check_Rain+0x1a8>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	601a      	str	r2, [r3, #0]
		dem=1;
 8000db6:	4b56      	ldr	r3, [pc, #344]	; (8000f10 <Check_Rain+0x1ac>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	601a      	str	r2, [r3, #0]

		if (HAL_GPIO_ReadPin(RELAY_GPIO_Port, RELAY_Pin) == 1) {
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	484f      	ldr	r0, [pc, #316]	; (8000efc <Check_Rain+0x198>)
 8000dc0:	f001 fe5e 	bl	8002a80 <HAL_GPIO_ReadPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d122      	bne.n	8000e10 <Check_Rain+0xac>
			HD44780_Clear();
 8000dca:	f7ff fd05 	bl	80007d8 <HD44780_Clear>
			HD44780_SetCursor(5,0);
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f7ff fd17 	bl	8000804 <HD44780_SetCursor>
			HD44780_PrintStr("MUA TOI");
 8000dd6:	484f      	ldr	r0, [pc, #316]	; (8000f14 <Check_Rain+0x1b0>)
 8000dd8:	f7ff fd92 	bl	8000900 <HD44780_PrintStr>
			waning(2);
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f000 fa03 	bl	80011e8 <waning>
			HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2110      	movs	r1, #16
 8000de6:	4845      	ldr	r0, [pc, #276]	; (8000efc <Check_Rain+0x198>)
 8000de8:	f001 fe62 	bl	8002ab0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2120      	movs	r1, #32
 8000df0:	4844      	ldr	r0, [pc, #272]	; (8000f04 <Check_Rain+0x1a0>)
 8000df2:	f001 fe5d 	bl	8002ab0 <HAL_GPIO_WritePin>
			HD44780_SetCursor(3,1);
 8000df6:	2101      	movs	r1, #1
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f7ff fd03 	bl	8000804 <HD44780_SetCursor>
			HD44780_PrintStr("OFF MAY BOM");
 8000dfe:	4846      	ldr	r0, [pc, #280]	; (8000f18 <Check_Rain+0x1b4>)
 8000e00:	f7ff fd7e 	bl	8000900 <HD44780_PrintStr>
			HAL_Delay(1000);
 8000e04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e08:	f000 ffca 	bl	8001da0 <HAL_Delay>
			HD44780_Clear();
 8000e0c:	f7ff fce4 	bl	80007d8 <HD44780_Clear>


		}

		if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) ==  1) {
 8000e10:	2101      	movs	r1, #1
 8000e12:	483c      	ldr	r0, [pc, #240]	; (8000f04 <Check_Rain+0x1a0>)
 8000e14:	f001 fe34 	bl	8002a80 <HAL_GPIO_ReadPin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d15d      	bne.n	8000eda <Check_Rain+0x176>
			while (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) ==  1) {}
 8000e1e:	bf00      	nop
 8000e20:	2101      	movs	r1, #1
 8000e22:	4838      	ldr	r0, [pc, #224]	; (8000f04 <Check_Rain+0x1a0>)
 8000e24:	f001 fe2c 	bl	8002a80 <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d0f8      	beq.n	8000e20 <Check_Rain+0xbc>
			dem=0;
 8000e2e:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <Check_Rain+0x1ac>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
			HD44780_Clear();
 8000e34:	f7ff fcd0 	bl	80007d8 <HD44780_Clear>
			HD44780_SetCursor(4,0);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2004      	movs	r0, #4
 8000e3c:	f7ff fce2 	bl	8000804 <HD44780_SetCursor>
			HD44780_PrintStr("DANG MUA");
 8000e40:	4836      	ldr	r0, [pc, #216]	; (8000f1c <Check_Rain+0x1b8>)
 8000e42:	f7ff fd5d 	bl	8000900 <HD44780_PrintStr>
			HD44780_SetCursor(1,1);
 8000e46:	2101      	movs	r1, #1
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff fcdb 	bl	8000804 <HD44780_SetCursor>
			HD44780_PrintStr("KHONG THE TUOI");
 8000e4e:	4834      	ldr	r0, [pc, #208]	; (8000f20 <Check_Rain+0x1bc>)
 8000e50:	f7ff fd56 	bl	8000900 <HD44780_PrintStr>
			waning(2);
 8000e54:	2002      	movs	r0, #2
 8000e56:	f000 f9c7 	bl	80011e8 <waning>
			HAL_Delay(1000);
 8000e5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5e:	f000 ff9f 	bl	8001da0 <HAL_Delay>
  			HD44780_Clear();
 8000e62:	f7ff fcb9 	bl	80007d8 <HD44780_Clear>
  			dem=0;
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <Check_Rain+0x1ac>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	e035      	b.n	8000eda <Check_Rain+0x176>
		}


	} else {
		HD44780_SetCursor(0,1);
 8000e6e:	2101      	movs	r1, #1
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff fcc7 	bl	8000804 <HD44780_SetCursor>
		HD44780_PrintStr("KHONG MUA");
 8000e76:	482b      	ldr	r0, [pc, #172]	; (8000f24 <Check_Rain+0x1c0>)
 8000e78:	f7ff fd42 	bl	8000900 <HD44780_PrintStr>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e82:	4820      	ldr	r0, [pc, #128]	; (8000f04 <Check_Rain+0x1a0>)
 8000e84:	f001 fe14 	bl	8002ab0 <HAL_GPIO_WritePin>
		if (dem_mua == 0) {
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <Check_Rain+0x1a8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <Check_Rain+0x132>
			SetRelay();
 8000e90:	f000 f8bc 	bl	800100c <SetRelay>
 8000e94:	e01c      	b.n	8000ed0 <Check_Rain+0x16c>
		}
		else {
			if (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) ==  1) {
 8000e96:	2104      	movs	r1, #4
 8000e98:	481a      	ldr	r0, [pc, #104]	; (8000f04 <Check_Rain+0x1a0>)
 8000e9a:	f001 fdf1 	bl	8002a80 <HAL_GPIO_ReadPin>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d115      	bne.n	8000ed0 <Check_Rain+0x16c>
		  		HD44780_Clear();
 8000ea4:	f7ff fc98 	bl	80007d8 <HD44780_Clear>
				HD44780_SetCursor(1,0);
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fcaa 	bl	8000804 <HD44780_SetCursor>
				HD44780_PrintStr("HOM NAY CO MUA");
 8000eb0:	481d      	ldr	r0, [pc, #116]	; (8000f28 <Check_Rain+0x1c4>)
 8000eb2:	f7ff fd25 	bl	8000900 <HD44780_PrintStr>
				HD44780_SetCursor(3,1);
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f7ff fca3 	bl	8000804 <HD44780_SetCursor>
				HD44780_PrintStr("KHONG TUOI");
 8000ebe:	481b      	ldr	r0, [pc, #108]	; (8000f2c <Check_Rain+0x1c8>)
 8000ec0:	f7ff fd1e 	bl	8000900 <HD44780_PrintStr>
		  		HAL_Delay(2000);
 8000ec4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ec8:	f000 ff6a 	bl	8001da0 <HAL_Delay>
		  		HD44780_Clear();
 8000ecc:	f7ff fc84 	bl	80007d8 <HD44780_Clear>
			}
		}

		Relay_Button();
 8000ed0:	f000 f82e 	bl	8000f30 <Relay_Button>
		dem4= 0;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <Check_Rain+0x1a4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
	}
	if (hour == 0 && minute == 0 && second == 0 ) {
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d108      	bne.n	8000ef2 <Check_Rain+0x18e>
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d105      	bne.n	8000ef2 <Check_Rain+0x18e>
 8000ee6:	797b      	ldrb	r3, [r7, #5]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <Check_Rain+0x18e>
		dem_mua = 0;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <Check_Rain+0x1a8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
	}

}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40020000 	.word	0x40020000
 8000f00:	08004a98 	.word	0x08004a98
 8000f04:	40020800 	.word	0x40020800
 8000f08:	20000070 	.word	0x20000070
 8000f0c:	20000074 	.word	0x20000074
 8000f10:	20000064 	.word	0x20000064
 8000f14:	08004aa4 	.word	0x08004aa4
 8000f18:	08004aac 	.word	0x08004aac
 8000f1c:	08004ab8 	.word	0x08004ab8
 8000f20:	08004ac4 	.word	0x08004ac4
 8000f24:	08004ad4 	.word	0x08004ad4
 8000f28:	08004ae0 	.word	0x08004ae0
 8000f2c:	08004af0 	.word	0x08004af0

08000f30 <Relay_Button>:

void Relay_Button()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) ==  1) {
 8000f34:	2101      	movs	r1, #1
 8000f36:	482e      	ldr	r0, [pc, #184]	; (8000ff0 <Relay_Button+0xc0>)
 8000f38:	f001 fda2 	bl	8002a80 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d154      	bne.n	8000fec <Relay_Button+0xbc>
		dem+=1;
 8000f42:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <Relay_Button+0xc4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	4a2a      	ldr	r2, [pc, #168]	; (8000ff4 <Relay_Button+0xc4>)
 8000f4a:	6013      	str	r3, [r2, #0]
		if (HAL_GPIO_ReadPin(RAIN_GPIO_Port, RAIN_Pin) == 0){
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	482a      	ldr	r0, [pc, #168]	; (8000ff8 <Relay_Button+0xc8>)
 8000f50:	f001 fd96 	bl	8002a80 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <Relay_Button+0x30>
			dem=0;
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <Relay_Button+0xc4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
		}
		if (dem % 2 != 0) {
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <Relay_Button+0xc4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00c      	beq.n	8000f86 <Relay_Button+0x56>
			dem=1;
 8000f6c:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <Relay_Button+0xc4>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
			HD44780_Clear();
 8000f72:	f7ff fc31 	bl	80007d8 <HD44780_Clear>
			HD44780_SetCursor(3,0);
 8000f76:	2100      	movs	r1, #0
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f7ff fc43 	bl	8000804 <HD44780_SetCursor>
			HD44780_PrintStr("ON MAY BOM");
 8000f7e:	481f      	ldr	r0, [pc, #124]	; (8000ffc <Relay_Button+0xcc>)
 8000f80:	f7ff fcbe 	bl	8000900 <HD44780_PrintStr>
 8000f84:	e00b      	b.n	8000f9e <Relay_Button+0x6e>

		} else {
			dem=2;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <Relay_Button+0xc4>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	601a      	str	r2, [r3, #0]
			HD44780_Clear();
 8000f8c:	f7ff fc24 	bl	80007d8 <HD44780_Clear>
			HD44780_SetCursor(3,0);
 8000f90:	2100      	movs	r1, #0
 8000f92:	2003      	movs	r0, #3
 8000f94:	f7ff fc36 	bl	8000804 <HD44780_SetCursor>
			HD44780_PrintStr("OFF MAY BOM");
 8000f98:	4819      	ldr	r0, [pc, #100]	; (8001000 <Relay_Button+0xd0>)
 8000f9a:	f7ff fcb1 	bl	8000900 <HD44780_PrintStr>

		}
			status =~ status;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <Relay_Button+0xd4>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <Relay_Button+0xd4>)
 8000fa8:	701a      	strb	r2, [r3, #0]
			Chip_On(1);
 8000faa:	2001      	movs	r0, #1
 8000fac:	f000 f950 	bl	8001250 <Chip_On>
			HD44780_Clear();
 8000fb0:	f7ff fc12 	bl	80007d8 <HD44780_Clear>
			HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, status);
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <Relay_Button+0xd4>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2110      	movs	r1, #16
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <Relay_Button+0xc8>)
 8000fbe:	f001 fd77 	bl	8002ab0 <HAL_GPIO_WritePin>
			if (HAL_GPIO_ReadPin(RELAY_GPIO_Port, RELAY_Pin) == 1) {
 8000fc2:	2110      	movs	r1, #16
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <Relay_Button+0xc8>)
 8000fc6:	f001 fd5b 	bl	8002a80 <HAL_GPIO_ReadPin>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d103      	bne.n	8000fd8 <Relay_Button+0xa8>
				dem3 = 1;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <Relay_Button+0xd8>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	e002      	b.n	8000fde <Relay_Button+0xae>
			} else dem3 =0;
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <Relay_Button+0xd8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, status);
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <Relay_Button+0xd4>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	2120      	movs	r1, #32
 8000fe6:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <Relay_Button+0xc0>)
 8000fe8:	f001 fd62 	bl	8002ab0 <HAL_GPIO_WritePin>
		}
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	20000064 	.word	0x20000064
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	08004afc 	.word	0x08004afc
 8001000:	08004aac 	.word	0x08004aac
 8001004:	20000058 	.word	0x20000058
 8001008:	20000068 	.word	0x20000068

0800100c <SetRelay>:

void SetRelay()
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0

	uint8_t hour = DS1307_GetHour();
 8001012:	f7ff fb19 	bl	8000648 <DS1307_GetHour>
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	uint8_t minute = DS1307_GetMinute();
 800101a:	f7ff fb24 	bl	8000666 <DS1307_GetMinute>
 800101e:	4603      	mov	r3, r0
 8001020:	71bb      	strb	r3, [r7, #6]
	int8_t second = DS1307_GetSecond();
 8001022:	f7ff fb2c 	bl	800067e <DS1307_GetSecond>
 8001026:	4603      	mov	r3, r0
 8001028:	717b      	strb	r3, [r7, #5]

	itoa(hour_on, h1,10);
 800102a:	4b61      	ldr	r3, [pc, #388]	; (80011b0 <SetRelay+0x1a4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	220a      	movs	r2, #10
 8001030:	4960      	ldr	r1, [pc, #384]	; (80011b4 <SetRelay+0x1a8>)
 8001032:	4618      	mov	r0, r3
 8001034:	f003 fc82 	bl	800493c <itoa>
	itoa(minute_on, h2,10);
 8001038:	4b5f      	ldr	r3, [pc, #380]	; (80011b8 <SetRelay+0x1ac>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	220a      	movs	r2, #10
 800103e:	495f      	ldr	r1, [pc, #380]	; (80011bc <SetRelay+0x1b0>)
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fc7b 	bl	800493c <itoa>

	if (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) ==  1) {
 8001046:	2104      	movs	r1, #4
 8001048:	485d      	ldr	r0, [pc, #372]	; (80011c0 <SetRelay+0x1b4>)
 800104a:	f001 fd19 	bl	8002a80 <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	2b01      	cmp	r3, #1
 8001052:	d14c      	bne.n	80010ee <SetRelay+0xe2>
  		HD44780_Clear();
 8001054:	f7ff fbc0 	bl	80007d8 <HD44780_Clear>
		HD44780_SetCursor(1,0);
 8001058:	2100      	movs	r1, #0
 800105a:	2001      	movs	r0, #1
 800105c:	f7ff fbd2 	bl	8000804 <HD44780_SetCursor>
		HD44780_PrintStr("HOM NAY KO MUA");
 8001060:	4858      	ldr	r0, [pc, #352]	; (80011c4 <SetRelay+0x1b8>)
 8001062:	f7ff fc4d 	bl	8000900 <HD44780_PrintStr>
		HD44780_SetCursor(0,1);
 8001066:	2101      	movs	r1, #1
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff fbcb 	bl	8000804 <HD44780_SetCursor>
		HD44780_PrintStr("TUOI LUC:");
 800106e:	4856      	ldr	r0, [pc, #344]	; (80011c8 <SetRelay+0x1bc>)
 8001070:	f7ff fc46 	bl	8000900 <HD44780_PrintStr>

		HD44780_SetCursor(10,1);
 8001074:	2101      	movs	r1, #1
 8001076:	200a      	movs	r0, #10
 8001078:	f7ff fbc4 	bl	8000804 <HD44780_SetCursor>
		if (hour_on < 10) {
 800107c:	4b4c      	ldr	r3, [pc, #304]	; (80011b0 <SetRelay+0x1a4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b09      	cmp	r3, #9
 8001082:	dc0c      	bgt.n	800109e <SetRelay+0x92>
			HD44780_PrintSpecialChar(zero);
 8001084:	4b51      	ldr	r3, [pc, #324]	; (80011cc <SetRelay+0x1c0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fc2c 	bl	80008e6 <HD44780_PrintSpecialChar>
			HD44780_SetCursor(11,1);
 800108e:	2101      	movs	r1, #1
 8001090:	200b      	movs	r0, #11
 8001092:	f7ff fbb7 	bl	8000804 <HD44780_SetCursor>
			HD44780_PrintStr(h1);
 8001096:	4847      	ldr	r0, [pc, #284]	; (80011b4 <SetRelay+0x1a8>)
 8001098:	f7ff fc32 	bl	8000900 <HD44780_PrintStr>
 800109c:	e002      	b.n	80010a4 <SetRelay+0x98>
			} else HD44780_PrintStr(h1);
 800109e:	4845      	ldr	r0, [pc, #276]	; (80011b4 <SetRelay+0x1a8>)
 80010a0:	f7ff fc2e 	bl	8000900 <HD44780_PrintStr>
		HD44780_SetCursor(12,1);
 80010a4:	2101      	movs	r1, #1
 80010a6:	200c      	movs	r0, #12
 80010a8:	f7ff fbac 	bl	8000804 <HD44780_SetCursor>
		HD44780_PrintStr(":");
 80010ac:	4848      	ldr	r0, [pc, #288]	; (80011d0 <SetRelay+0x1c4>)
 80010ae:	f7ff fc27 	bl	8000900 <HD44780_PrintStr>
		HD44780_SetCursor(13,1);
 80010b2:	2101      	movs	r1, #1
 80010b4:	200d      	movs	r0, #13
 80010b6:	f7ff fba5 	bl	8000804 <HD44780_SetCursor>
		if (minute_on < 10) {
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <SetRelay+0x1ac>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b09      	cmp	r3, #9
 80010c0:	dc0c      	bgt.n	80010dc <SetRelay+0xd0>
			HD44780_PrintSpecialChar(zero);
 80010c2:	4b42      	ldr	r3, [pc, #264]	; (80011cc <SetRelay+0x1c0>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fc0d 	bl	80008e6 <HD44780_PrintSpecialChar>
			HD44780_SetCursor(14,1);
 80010cc:	2101      	movs	r1, #1
 80010ce:	200e      	movs	r0, #14
 80010d0:	f7ff fb98 	bl	8000804 <HD44780_SetCursor>
			HD44780_PrintStr(h2);
 80010d4:	4839      	ldr	r0, [pc, #228]	; (80011bc <SetRelay+0x1b0>)
 80010d6:	f7ff fc13 	bl	8000900 <HD44780_PrintStr>
 80010da:	e002      	b.n	80010e2 <SetRelay+0xd6>
		} else HD44780_PrintStr(h2);
 80010dc:	4837      	ldr	r0, [pc, #220]	; (80011bc <SetRelay+0x1b0>)
 80010de:	f7ff fc0f 	bl	8000900 <HD44780_PrintStr>

  		HAL_Delay(2000);
 80010e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010e6:	f000 fe5b 	bl	8001da0 <HAL_Delay>
  		HD44780_Clear();
 80010ea:	f7ff fb75 	bl	80007d8 <HD44780_Clear>
	}
	if (hour == hour_on && minute >= minute_on	 && minute < minute_on+1 && second < second_on - 55) {
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <SetRelay+0x1a4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d114      	bne.n	8001122 <SetRelay+0x116>
 80010f8:	79ba      	ldrb	r2, [r7, #6]
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <SetRelay+0x1ac>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	db0f      	blt.n	8001122 <SetRelay+0x116>
 8001102:	79ba      	ldrb	r2, [r7, #6]
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <SetRelay+0x1ac>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	dc0a      	bgt.n	8001122 <SetRelay+0x116>
 800110c:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8001110:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <SetRelay+0x1c8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3b37      	subs	r3, #55	; 0x37
 8001116:	429a      	cmp	r2, r3
 8001118:	da03      	bge.n	8001122 <SetRelay+0x116>

		dem2 = 1;
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <SetRelay+0x1cc>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	e002      	b.n	8001128 <SetRelay+0x11c>
	}
	else {
		dem2=0;
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <SetRelay+0x1cc>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
	}
	if (dem2 == 1) {
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <SetRelay+0x1cc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d11f      	bne.n	8001170 <SetRelay+0x164>
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 1);
 8001130:	2201      	movs	r2, #1
 8001132:	2110      	movs	r1, #16
 8001134:	4829      	ldr	r0, [pc, #164]	; (80011dc <SetRelay+0x1d0>)
 8001136:	f001 fcbb 	bl	8002ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 800113a:	2201      	movs	r2, #1
 800113c:	2120      	movs	r1, #32
 800113e:	4820      	ldr	r0, [pc, #128]	; (80011c0 <SetRelay+0x1b4>)
 8001140:	f001 fcb6 	bl	8002ab0 <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) ==  1) {
 8001144:	2101      	movs	r1, #1
 8001146:	481e      	ldr	r0, [pc, #120]	; (80011c0 <SetRelay+0x1b4>)
 8001148:	f001 fc9a 	bl	8002a80 <HAL_GPIO_ReadPin>
 800114c:	4603      	mov	r3, r0
 800114e:	2b01      	cmp	r3, #1
 8001150:	d127      	bne.n	80011a2 <SetRelay+0x196>
			HD44780_Clear();
 8001152:	f7ff fb41 	bl	80007d8 <HD44780_Clear>
			HD44780_SetCursor(1,0);
 8001156:	2100      	movs	r1, #0
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff fb53 	bl	8000804 <HD44780_SetCursor>
			HD44780_PrintStr("DANG TUOI");
 800115e:	4820      	ldr	r0, [pc, #128]	; (80011e0 <SetRelay+0x1d4>)
 8001160:	f7ff fbce 	bl	8000900 <HD44780_PrintStr>
			Chip_On(2);
 8001164:	2002      	movs	r0, #2
 8001166:	f000 f873 	bl	8001250 <Chip_On>
			HD44780_Clear();
 800116a:	f7ff fb35 	bl	80007d8 <HD44780_Clear>
 800116e:	e018      	b.n	80011a2 <SetRelay+0x196>
		}

	} else {

		if (dem3 == 0) {
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <SetRelay+0x1d8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10a      	bne.n	800118e <SetRelay+0x182>
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2110      	movs	r1, #16
 800117c:	4817      	ldr	r0, [pc, #92]	; (80011dc <SetRelay+0x1d0>)
 800117e:	f001 fc97 	bl	8002ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);}
 8001182:	2200      	movs	r2, #0
 8001184:	2120      	movs	r1, #32
 8001186:	480e      	ldr	r0, [pc, #56]	; (80011c0 <SetRelay+0x1b4>)
 8001188:	f001 fc92 	bl	8002ab0 <HAL_GPIO_WritePin>
 800118c:	e009      	b.n	80011a2 <SetRelay+0x196>
		else {
			HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 1);
 800118e:	2201      	movs	r2, #1
 8001190:	2110      	movs	r1, #16
 8001192:	4812      	ldr	r0, [pc, #72]	; (80011dc <SetRelay+0x1d0>)
 8001194:	f001 fc8c 	bl	8002ab0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8001198:	2201      	movs	r2, #1
 800119a:	2120      	movs	r1, #32
 800119c:	4808      	ldr	r0, [pc, #32]	; (80011c0 <SetRelay+0x1b4>)
 800119e:	f001 fc87 	bl	8002ab0 <HAL_GPIO_WritePin>
		}
	}

	dem2 = 0;
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <SetRelay+0x1cc>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000010 	.word	0x20000010
 80011b4:	200001ac 	.word	0x200001ac
 80011b8:	20000014 	.word	0x20000014
 80011bc:	200001b4 	.word	0x200001b4
 80011c0:	40020800 	.word	0x40020800
 80011c4:	08004b08 	.word	0x08004b08
 80011c8:	08004b18 	.word	0x08004b18
 80011cc:	2000001c 	.word	0x2000001c
 80011d0:	08004b24 	.word	0x08004b24
 80011d4:	20000018 	.word	0x20000018
 80011d8:	2000006c 	.word	0x2000006c
 80011dc:	40020000 	.word	0x40020000
 80011e0:	08004b28 	.word	0x08004b28
 80011e4:	20000068 	.word	0x20000068

080011e8 <waning>:

void waning(int n)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	for (int i=1; i<=n; i++) {
 80011f0:	2301      	movs	r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e01e      	b.n	8001234 <waning+0x4c>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2120      	movs	r1, #32
 80011fa:	4813      	ldr	r0, [pc, #76]	; (8001248 <waning+0x60>)
 80011fc:	f001 fc58 	bl	8002ab0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CHIP_GPIO_Port, CHIP_Pin, 1);
 8001200:	2201      	movs	r2, #1
 8001202:	2108      	movs	r1, #8
 8001204:	4811      	ldr	r0, [pc, #68]	; (800124c <waning+0x64>)
 8001206:	f001 fc53 	bl	8002ab0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 800120a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800120e:	f000 fdc7 	bl	8001da0 <HAL_Delay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2120      	movs	r1, #32
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <waning+0x60>)
 8001218:	f001 fc4a 	bl	8002ab0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CHIP_GPIO_Port, CHIP_Pin, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2108      	movs	r1, #8
 8001220:	480a      	ldr	r0, [pc, #40]	; (800124c <waning+0x64>)
 8001222:	f001 fc45 	bl	8002ab0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8001226:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800122a:	f000 fdb9 	bl	8001da0 <HAL_Delay>
	for (int i=1; i<=n; i++) {
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	429a      	cmp	r2, r3
 800123a:	dddc      	ble.n	80011f6 <waning+0xe>
	}
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020000 	.word	0x40020000
 800124c:	40020800 	.word	0x40020800

08001250 <Chip_On>:

void Chip_On(int n)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	for (int i=1; i<=n; i++) {
 8001258:	2301      	movs	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	e014      	b.n	8001288 <Chip_On+0x38>
			HAL_GPIO_WritePin(CHIP_GPIO_Port, CHIP_Pin, 1);
 800125e:	2201      	movs	r2, #1
 8001260:	2108      	movs	r1, #8
 8001262:	480e      	ldr	r0, [pc, #56]	; (800129c <Chip_On+0x4c>)
 8001264:	f001 fc24 	bl	8002ab0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8001268:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800126c:	f000 fd98 	bl	8001da0 <HAL_Delay>
			HAL_GPIO_WritePin(CHIP_GPIO_Port, CHIP_Pin, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2108      	movs	r1, #8
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <Chip_On+0x4c>)
 8001276:	f001 fc1b 	bl	8002ab0 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 800127a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800127e:	f000 fd8f 	bl	8001da0 <HAL_Delay>
	for (int i=1; i<=n; i++) {
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3301      	adds	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dde6      	ble.n	800125e <Chip_On+0xe>
	}
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40020800 	.word	0x40020800

080012a0 <Realtime>:

void Realtime()
{
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b094      	sub	sp, #80	; 0x50
 80012a4:	af00      	add	r7, sp, #0
	const char *DAYS_OF_WEEK[7] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
 80012a6:	4b77      	ldr	r3, [pc, #476]	; (8001484 <Realtime+0x1e4>)
 80012a8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80012ac:	461d      	mov	r5, r3
 80012ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint8_t date = DS1307_GetDate();
 80012ba:	f7ff f98b 	bl	80005d4 <DS1307_GetDate>
 80012be:	4603      	mov	r3, r0
 80012c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t month = DS1307_GetMonth();
 80012c4:	f7ff f992 	bl	80005ec <DS1307_GetMonth>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint16_t year = DS1307_GetYear();
 80012ce:	f7ff f999 	bl	8000604 <DS1307_GetYear>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint8_t dow = DS1307_GetDayOfWeek();
 80012d8:	f7ff f970 	bl	80005bc <DS1307_GetDayOfWeek>
 80012dc:	4603      	mov	r3, r0
 80012de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	uint8_t hour = DS1307_GetHour();
 80012e2:	f7ff f9b1 	bl	8000648 <DS1307_GetHour>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	uint8_t minute = DS1307_GetMinute();
 80012ec:	f7ff f9bb 	bl	8000666 <DS1307_GetMinute>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	char snum2[5];// minute
	char snum4[5];// date
	char snum5[5];// month
	char snum6[5];// year

	itoa(hour, snum1, 10);
 80012f6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80012fa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012fe:	220a      	movs	r2, #10
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fb1b 	bl	800493c <itoa>
	itoa(minute, snum2, 10);
 8001306:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800130a:	f107 011c 	add.w	r1, r7, #28
 800130e:	220a      	movs	r2, #10
 8001310:	4618      	mov	r0, r3
 8001312:	f003 fb13 	bl	800493c <itoa>
	itoa(date, snum4, 10);
 8001316:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800131a:	f107 0114 	add.w	r1, r7, #20
 800131e:	220a      	movs	r2, #10
 8001320:	4618      	mov	r0, r3
 8001322:	f003 fb0b 	bl	800493c <itoa>
	itoa(month, snum5, 10);
 8001326:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800132a:	f107 010c 	add.w	r1, r7, #12
 800132e:	220a      	movs	r2, #10
 8001330:	4618      	mov	r0, r3
 8001332:	f003 fb03 	bl	800493c <itoa>
	itoa(year, snum6, 10);
 8001336:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800133a:	1d39      	adds	r1, r7, #4
 800133c:	220a      	movs	r2, #10
 800133e:	4618      	mov	r0, r3
 8001340:	f003 fafc 	bl	800493c <itoa>

	HD44780_SetCursor(11,0);
 8001344:	2100      	movs	r1, #0
 8001346:	200b      	movs	r0, #11
 8001348:	f7ff fa5c 	bl	8000804 <HD44780_SetCursor>
	if (hour < 10) {
 800134c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001350:	2b09      	cmp	r3, #9
 8001352:	d80e      	bhi.n	8001372 <Realtime+0xd2>
		HD44780_PrintSpecialChar(zero);
 8001354:	4b4c      	ldr	r3, [pc, #304]	; (8001488 <Realtime+0x1e8>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fac4 	bl	80008e6 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(12,0);
 800135e:	2100      	movs	r1, #0
 8001360:	200c      	movs	r0, #12
 8001362:	f7ff fa4f 	bl	8000804 <HD44780_SetCursor>
		HD44780_PrintStr(snum1);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fac8 	bl	8000900 <HD44780_PrintStr>
 8001370:	e004      	b.n	800137c <Realtime+0xdc>
		} else HD44780_PrintStr(snum1);
 8001372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fac2 	bl	8000900 <HD44780_PrintStr>
	HD44780_SetCursor(13,0);
 800137c:	2100      	movs	r1, #0
 800137e:	200d      	movs	r0, #13
 8001380:	f7ff fa40 	bl	8000804 <HD44780_SetCursor>
	HD44780_PrintStr(":");
 8001384:	4841      	ldr	r0, [pc, #260]	; (800148c <Realtime+0x1ec>)
 8001386:	f7ff fabb 	bl	8000900 <HD44780_PrintStr>
	HD44780_SetCursor(14,0);
 800138a:	2100      	movs	r1, #0
 800138c:	200e      	movs	r0, #14
 800138e:	f7ff fa39 	bl	8000804 <HD44780_SetCursor>
	if (minute < 10) {
 8001392:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001396:	2b09      	cmp	r3, #9
 8001398:	d80e      	bhi.n	80013b8 <Realtime+0x118>
		HD44780_PrintSpecialChar(zero);
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <Realtime+0x1e8>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff faa1 	bl	80008e6 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(15,0);
 80013a4:	2100      	movs	r1, #0
 80013a6:	200f      	movs	r0, #15
 80013a8:	f7ff fa2c 	bl	8000804 <HD44780_SetCursor>
		HD44780_PrintStr(snum2);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff faa5 	bl	8000900 <HD44780_PrintStr>
 80013b6:	e004      	b.n	80013c2 <Realtime+0x122>
	} else HD44780_PrintStr(snum2);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fa9f 	bl	8000900 <HD44780_PrintStr>
	HD44780_SetCursor(0,0);
 80013c2:	2100      	movs	r1, #0
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff fa1d 	bl	8000804 <HD44780_SetCursor>
	HD44780_PrintStr(DAYS_OF_WEEK[dow]);
 80013ca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	3350      	adds	r3, #80	; 0x50
 80013d2:	443b      	add	r3, r7
 80013d4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fa91 	bl	8000900 <HD44780_PrintStr>

	HD44780_SetCursor(3,1);
 80013de:	2101      	movs	r1, #1
 80013e0:	2003      	movs	r0, #3
 80013e2:	f7ff fa0f 	bl	8000804 <HD44780_SetCursor>
		if (date < 10) {
 80013e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80013ea:	2b09      	cmp	r3, #9
 80013ec:	d80e      	bhi.n	800140c <Realtime+0x16c>
			HD44780_PrintSpecialChar(zero);
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <Realtime+0x1e8>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fa77 	bl	80008e6 <HD44780_PrintSpecialChar>
			HD44780_SetCursor(4,1);
 80013f8:	2101      	movs	r1, #1
 80013fa:	2004      	movs	r0, #4
 80013fc:	f7ff fa02 	bl	8000804 <HD44780_SetCursor>
			HD44780_PrintStr(snum4);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fa7b 	bl	8000900 <HD44780_PrintStr>
 800140a:	e004      	b.n	8001416 <Realtime+0x176>
		} else HD44780_PrintStr(snum4);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fa75 	bl	8000900 <HD44780_PrintStr>

		HD44780_SetCursor(5,1);
 8001416:	2101      	movs	r1, #1
 8001418:	2005      	movs	r0, #5
 800141a:	f7ff f9f3 	bl	8000804 <HD44780_SetCursor>
		HD44780_PrintStr("/");
 800141e:	481c      	ldr	r0, [pc, #112]	; (8001490 <Realtime+0x1f0>)
 8001420:	f7ff fa6e 	bl	8000900 <HD44780_PrintStr>

		HD44780_SetCursor(6,1);
 8001424:	2101      	movs	r1, #1
 8001426:	2006      	movs	r0, #6
 8001428:	f7ff f9ec 	bl	8000804 <HD44780_SetCursor>
		if (month < 10) {
 800142c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001430:	2b09      	cmp	r3, #9
 8001432:	d80e      	bhi.n	8001452 <Realtime+0x1b2>
			HD44780_PrintSpecialChar(zero);
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <Realtime+0x1e8>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fa54 	bl	80008e6 <HD44780_PrintSpecialChar>
			HD44780_SetCursor(7,1);
 800143e:	2101      	movs	r1, #1
 8001440:	2007      	movs	r0, #7
 8001442:	f7ff f9df 	bl	8000804 <HD44780_SetCursor>
			HD44780_PrintStr(snum5);
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fa58 	bl	8000900 <HD44780_PrintStr>
 8001450:	e004      	b.n	800145c <Realtime+0x1bc>
		} else HD44780_PrintStr(snum5);
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fa52 	bl	8000900 <HD44780_PrintStr>

		HD44780_SetCursor(8,1);
 800145c:	2101      	movs	r1, #1
 800145e:	2008      	movs	r0, #8
 8001460:	f7ff f9d0 	bl	8000804 <HD44780_SetCursor>
		HD44780_PrintStr("/");
 8001464:	480a      	ldr	r0, [pc, #40]	; (8001490 <Realtime+0x1f0>)
 8001466:	f7ff fa4b 	bl	8000900 <HD44780_PrintStr>

		HD44780_SetCursor(9,1);
 800146a:	2101      	movs	r1, #1
 800146c:	2009      	movs	r0, #9
 800146e:	f7ff f9c9 	bl	8000804 <HD44780_SetCursor>
		HD44780_PrintStr(snum6);
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fa43 	bl	8000900 <HD44780_PrintStr>
}
 800147a:	bf00      	nop
 800147c:	3750      	adds	r7, #80	; 0x50
 800147e:	46bd      	mov	sp, r7
 8001480:	bdb0      	pop	{r4, r5, r7, pc}
 8001482:	bf00      	nop
 8001484:	08004b38 	.word	0x08004b38
 8001488:	2000001c 	.word	0x2000001c
 800148c:	08004b24 	.word	0x08004b24
 8001490:	08004b34 	.word	0x08004b34

08001494 <Real_Hour_Minute>:

void Real_Hour_Minute()
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
	uint8_t hour = DS1307_GetHour();
 800149a:	f7ff f8d5 	bl	8000648 <DS1307_GetHour>
 800149e:	4603      	mov	r3, r0
 80014a0:	73fb      	strb	r3, [r7, #15]
	uint8_t minute = DS1307_GetMinute();
 80014a2:	f7ff f8e0 	bl	8000666 <DS1307_GetMinute>
 80014a6:	4603      	mov	r3, r0
 80014a8:	73bb      	strb	r3, [r7, #14]
	char snum1[5];
	char snum2[5];
	char zero = '0';
 80014aa:	2330      	movs	r3, #48	; 0x30
 80014ac:	737b      	strb	r3, [r7, #13]
	itoa(hour, snum1, 10);
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	f107 0108 	add.w	r1, r7, #8
 80014b4:	220a      	movs	r2, #10
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 fa40 	bl	800493c <itoa>
	itoa(minute, snum2, 10);
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	4639      	mov	r1, r7
 80014c0:	220a      	movs	r2, #10
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 fa3a 	bl	800493c <itoa>

	HD44780_SetCursor(11,0);
 80014c8:	2100      	movs	r1, #0
 80014ca:	200b      	movs	r0, #11
 80014cc:	f7ff f99a 	bl	8000804 <HD44780_SetCursor>
	if (hour < 10) {
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	2b09      	cmp	r3, #9
 80014d4:	d80d      	bhi.n	80014f2 <Real_Hour_Minute+0x5e>
		HD44780_PrintSpecialChar(zero);
 80014d6:	7b7b      	ldrb	r3, [r7, #13]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fa04 	bl	80008e6 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(12,0);
 80014de:	2100      	movs	r1, #0
 80014e0:	200c      	movs	r0, #12
 80014e2:	f7ff f98f 	bl	8000804 <HD44780_SetCursor>
		HD44780_PrintStr(snum1);
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fa08 	bl	8000900 <HD44780_PrintStr>
 80014f0:	e004      	b.n	80014fc <Real_Hour_Minute+0x68>
		} else HD44780_PrintStr(snum1);
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fa02 	bl	8000900 <HD44780_PrintStr>
	HD44780_SetCursor(13,0);
 80014fc:	2100      	movs	r1, #0
 80014fe:	200d      	movs	r0, #13
 8001500:	f7ff f980 	bl	8000804 <HD44780_SetCursor>
	HD44780_PrintStr(":");
 8001504:	480f      	ldr	r0, [pc, #60]	; (8001544 <Real_Hour_Minute+0xb0>)
 8001506:	f7ff f9fb 	bl	8000900 <HD44780_PrintStr>
	HD44780_SetCursor(14,0);
 800150a:	2100      	movs	r1, #0
 800150c:	200e      	movs	r0, #14
 800150e:	f7ff f979 	bl	8000804 <HD44780_SetCursor>
	if (minute < 10) {
 8001512:	7bbb      	ldrb	r3, [r7, #14]
 8001514:	2b09      	cmp	r3, #9
 8001516:	d80c      	bhi.n	8001532 <Real_Hour_Minute+0x9e>
		HD44780_PrintSpecialChar(zero);
 8001518:	7b7b      	ldrb	r3, [r7, #13]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f9e3 	bl	80008e6 <HD44780_PrintSpecialChar>
		HD44780_SetCursor(15,0);
 8001520:	2100      	movs	r1, #0
 8001522:	200f      	movs	r0, #15
 8001524:	f7ff f96e 	bl	8000804 <HD44780_SetCursor>
		HD44780_PrintStr(snum2);
 8001528:	463b      	mov	r3, r7
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f9e8 	bl	8000900 <HD44780_PrintStr>
	} else HD44780_PrintStr(snum2);
}
 8001530:	e003      	b.n	800153a <Real_Hour_Minute+0xa6>
	} else HD44780_PrintStr(snum2);
 8001532:	463b      	mov	r3, r7
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f9e3 	bl	8000900 <HD44780_PrintStr>
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	08004b24 	.word	0x08004b24

08001548 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b094      	sub	sp, #80	; 0x50
 800154c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154e:	f107 0320 	add.w	r3, r7, #32
 8001552:	2230      	movs	r2, #48	; 0x30
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f003 f9f2 	bl	8004940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <SystemClock_Config+0xd0>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	4a28      	ldr	r2, [pc, #160]	; (8001618 <SystemClock_Config+0xd0>)
 8001576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157a:	6413      	str	r3, [r2, #64]	; 0x40
 800157c:	4b26      	ldr	r3, [pc, #152]	; (8001618 <SystemClock_Config+0xd0>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	4b23      	ldr	r3, [pc, #140]	; (800161c <SystemClock_Config+0xd4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001594:	4a21      	ldr	r2, [pc, #132]	; (800161c <SystemClock_Config+0xd4>)
 8001596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <SystemClock_Config+0xd4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a8:	2302      	movs	r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ac:	2301      	movs	r3, #1
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b0:	2310      	movs	r3, #16
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b4:	2302      	movs	r3, #2
 80015b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015bc:	2310      	movs	r3, #16
 80015be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015c6:	2304      	movs	r3, #4
 80015c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015ca:	2307      	movs	r3, #7
 80015cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 fa1c 	bl	8003a10 <HAL_RCC_OscConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015de:	f000 f9ad 	bl	800193c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e2:	230f      	movs	r3, #15
 80015e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e6:	2302      	movs	r3, #2
 80015e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2102      	movs	r1, #2
 80015fe:	4618      	mov	r0, r3
 8001600:	f002 fc7e 	bl	8003f00 <HAL_RCC_ClockConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800160a:	f000 f997 	bl	800193c <Error_Handler>
  }
}
 800160e:	bf00      	nop
 8001610:	3750      	adds	r7, #80	; 0x50
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000

08001620 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001626:	463b      	mov	r3, r7
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001634:	4a21      	ldr	r2, [pc, #132]	; (80016bc <MX_ADC1_Init+0x9c>)
 8001636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <MX_ADC1_Init+0x98>)
 800163a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800163e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_ADC1_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_ADC1_Init+0x98>)
 800165c:	2200      	movs	r2, #0
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <MX_ADC1_Init+0xa0>)
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_ADC1_Init+0x98>)
 800166e:	2201      	movs	r2, #1
 8001670:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_ADC1_Init+0x98>)
 800167c:	2201      	movs	r2, #1
 800167e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <MX_ADC1_Init+0x98>)
 8001682:	f000 fbb1 	bl	8001de8 <HAL_ADC_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800168c:	f000 f956 	bl	800193c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001690:	2300      	movs	r3, #0
 8001692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001694:	2301      	movs	r3, #1
 8001696:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169c:	463b      	mov	r3, r7
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_ADC1_Init+0x98>)
 80016a2:	f000 fd65 	bl	8002170 <HAL_ADC_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016ac:	f000 f946 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000078 	.word	0x20000078
 80016bc:	40012000 	.word	0x40012000
 80016c0:	0f000001 	.word	0x0f000001

080016c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <MX_I2C1_Init+0x50>)
 80016ca:	4a13      	ldr	r2, [pc, #76]	; (8001718 <MX_I2C1_Init+0x54>)
 80016cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_I2C1_Init+0x50>)
 80016d0:	4a12      	ldr	r2, [pc, #72]	; (800171c <MX_I2C1_Init+0x58>)
 80016d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_I2C1_Init+0x50>)
 80016e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <MX_I2C1_Init+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_I2C1_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <MX_I2C1_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_I2C1_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001700:	4804      	ldr	r0, [pc, #16]	; (8001714 <MX_I2C1_Init+0x50>)
 8001702:	f001 f9ef 	bl	8002ae4 <HAL_I2C_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800170c:	f000 f916 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200000c0 	.word	0x200000c0
 8001718:	40005400 	.word	0x40005400
 800171c:	000186a0 	.word	0x000186a0

08001720 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_I2C3_Init+0x50>)
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <MX_I2C3_Init+0x54>)
 8001728:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_I2C3_Init+0x50>)
 800172c:	4a12      	ldr	r2, [pc, #72]	; (8001778 <MX_I2C3_Init+0x58>)
 800172e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_I2C3_Init+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_I2C3_Init+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_I2C3_Init+0x50>)
 800173e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001742:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <MX_I2C3_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_I2C3_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <MX_I2C3_Init+0x50>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_I2C3_Init+0x50>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <MX_I2C3_Init+0x50>)
 800175e:	f001 f9c1 	bl	8002ae4 <HAL_I2C_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001768:	f000 f8e8 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000114 	.word	0x20000114
 8001774:	40005c00 	.word	0x40005c00
 8001778:	000186a0 	.word	0x000186a0

0800177c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <MX_USART2_UART_Init+0x50>)
 8001784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800178c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017a2:	220c      	movs	r2, #12
 80017a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017b4:	f002 fdc4 	bl	8004340 <HAL_UART_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017be:	f000 f8bd 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000168 	.word	0x20000168
 80017cc:	40004400 	.word	0x40004400

080017d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b51      	ldr	r3, [pc, #324]	; (8001930 <MX_GPIO_Init+0x160>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a50      	ldr	r2, [pc, #320]	; (8001930 <MX_GPIO_Init+0x160>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b4e      	ldr	r3, [pc, #312]	; (8001930 <MX_GPIO_Init+0x160>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <MX_GPIO_Init+0x160>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a49      	ldr	r2, [pc, #292]	; (8001930 <MX_GPIO_Init+0x160>)
 800180c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <MX_GPIO_Init+0x160>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	4b43      	ldr	r3, [pc, #268]	; (8001930 <MX_GPIO_Init+0x160>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a42      	ldr	r2, [pc, #264]	; (8001930 <MX_GPIO_Init+0x160>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b40      	ldr	r3, [pc, #256]	; (8001930 <MX_GPIO_Init+0x160>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <MX_GPIO_Init+0x160>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a3b      	ldr	r2, [pc, #236]	; (8001930 <MX_GPIO_Init+0x160>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b39      	ldr	r3, [pc, #228]	; (8001930 <MX_GPIO_Init+0x160>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CHIP_Pin|LED3_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	f44f 7194 	mov.w	r1, #296	; 0x128
 800185c:	4835      	ldr	r0, [pc, #212]	; (8001934 <MX_GPIO_Init+0x164>)
 800185e:	f001 f927 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2130      	movs	r1, #48	; 0x30
 8001866:	4834      	ldr	r0, [pc, #208]	; (8001938 <MX_GPIO_Init+0x168>)
 8001868:	f001 f922 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800186c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001872:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	482c      	ldr	r0, [pc, #176]	; (8001934 <MX_GPIO_Init+0x164>)
 8001884:	f000 ff78 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001888:	2307      	movs	r3, #7
 800188a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001890:	2302      	movs	r3, #2
 8001892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4826      	ldr	r0, [pc, #152]	; (8001934 <MX_GPIO_Init+0x164>)
 800189c:	f000 ff6c 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHIP_Pin LED3_Pin LED1_Pin */
  GPIO_InitStruct.Pin = CHIP_Pin|LED3_Pin|LED1_Pin;
 80018a0:	f44f 7394 	mov.w	r3, #296	; 0x128
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	481e      	ldr	r0, [pc, #120]	; (8001934 <MX_GPIO_Init+0x164>)
 80018ba:	f000 ff5d 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : RAIN_Pin */
  GPIO_InitStruct.Pin = RAIN_Pin;
 80018be:	2302      	movs	r3, #2
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4819      	ldr	r0, [pc, #100]	; (8001938 <MX_GPIO_Init+0x168>)
 80018d2:	f000 ff51 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 80018d6:	2310      	movs	r3, #16
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018de:	2302      	movs	r3, #2
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4812      	ldr	r0, [pc, #72]	; (8001938 <MX_GPIO_Init+0x168>)
 80018ee:	f000 ff43 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018f2:	2320      	movs	r3, #32
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <MX_GPIO_Init+0x168>)
 800190a:	f000 ff35 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800190e:	2340      	movs	r3, #64	; 0x40
 8001910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <MX_GPIO_Init+0x164>)
 8001922:	f000 ff29 	bl	8002778 <HAL_GPIO_Init>

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40020800 	.word	0x40020800
 8001938:	40020000 	.word	0x40020000

0800193c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001944:	e7fe      	b.n	8001944 <Error_Handler+0x8>
	...

08001948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_MspInit+0x4c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <HAL_MspInit+0x4c>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_MspInit+0x4c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_MspInit+0x4c>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a08      	ldr	r2, [pc, #32]	; (8001994 <HAL_MspInit+0x4c>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001986:	2007      	movs	r0, #7
 8001988:	f000 fec2 	bl	8002710 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <HAL_ADC_MspInit+0x7c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d127      	bne.n	8001a0a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <HAL_ADC_MspInit+0x80>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <HAL_ADC_MspInit+0x80>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_ADC_MspInit+0x80>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_ADC_MspInit+0x80>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <HAL_ADC_MspInit+0x80>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_ADC_MspInit+0x80>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019f2:	2301      	movs	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f6:	2303      	movs	r3, #3
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <HAL_ADC_MspInit+0x84>)
 8001a06:	f000 feb7 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	; 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40012000 	.word	0x40012000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000

08001a20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	; 0x30
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a42      	ldr	r2, [pc, #264]	; (8001b48 <HAL_I2C_MspInit+0x128>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d12d      	bne.n	8001a9e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a40      	ldr	r2, [pc, #256]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a64:	2312      	movs	r3, #18
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a70:	2304      	movs	r3, #4
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4835      	ldr	r0, [pc, #212]	; (8001b50 <HAL_I2C_MspInit+0x130>)
 8001a7c:	f000 fe7c 	bl	8002778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	4a30      	ldr	r2, [pc, #192]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001a8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a90:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a9c:	e050      	b.n	8001b40 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a2c      	ldr	r2, [pc, #176]	; (8001b54 <HAL_I2C_MspInit+0x134>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d14b      	bne.n	8001b40 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	4a26      	ldr	r2, [pc, #152]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab8:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	4a1f      	ldr	r2, [pc, #124]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae6:	2312      	movs	r3, #18
 8001ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001af2:	2304      	movs	r3, #4
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	4816      	ldr	r0, [pc, #88]	; (8001b58 <HAL_I2C_MspInit+0x138>)
 8001afe:	f000 fe3b 	bl	8002778 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b08:	2312      	movs	r3, #18
 8001b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b14:	2304      	movs	r3, #4
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480f      	ldr	r0, [pc, #60]	; (8001b5c <HAL_I2C_MspInit+0x13c>)
 8001b20:	f000 fe2a 	bl	8002778 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001b2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b32:	6413      	str	r3, [r2, #64]	; 0x40
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_I2C_MspInit+0x12c>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
}
 8001b40:	bf00      	nop
 8001b42:	3730      	adds	r7, #48	; 0x30
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40005c00 	.word	0x40005c00
 8001b58:	40020800 	.word	0x40020800
 8001b5c:	40020000 	.word	0x40020000

08001b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <HAL_UART_MspInit+0x84>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d12b      	bne.n	8001bda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_UART_MspInit+0x88>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_UART_MspInit+0x88>)
 8001b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_UART_MspInit+0x88>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_UART_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <HAL_UART_MspInit+0x88>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_UART_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bba:	230c      	movs	r3, #12
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bca:	2307      	movs	r3, #7
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <HAL_UART_MspInit+0x8c>)
 8001bd6:	f000 fdcf 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	; 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40004400 	.word	0x40004400
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000

08001bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <NMI_Handler+0x4>

08001bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <MemManage_Handler+0x4>

08001c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <BusFault_Handler+0x4>

08001c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <UsageFault_Handler+0x4>

08001c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c3c:	f000 f890 	bl	8001d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c6c:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c6e:	490e      	ldr	r1, [pc, #56]	; (8001ca8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c70:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c74:	e002      	b.n	8001c7c <LoopCopyDataInit>

08001c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7a:	3304      	adds	r3, #4

08001c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c80:	d3f9      	bcc.n	8001c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c84:	4c0b      	ldr	r4, [pc, #44]	; (8001cb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c88:	e001      	b.n	8001c8e <LoopFillZerobss>

08001c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c8c:	3204      	adds	r2, #4

08001c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c90:	d3fb      	bcc.n	8001c8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c92:	f7ff ffd7 	bl	8001c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c96:	f002 fe15 	bl	80048c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9a:	f7fe ff21 	bl	8000ae0 <main>
  bx  lr    
 8001c9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ca0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001cac:	08004ba4 	.word	0x08004ba4
  ldr r2, =_sbss
 8001cb0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001cb4:	200001c0 	.word	0x200001c0

08001cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <HAL_Init+0x40>)
 8001cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_Init+0x40>)
 8001cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_Init+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <HAL_Init+0x40>)
 8001cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	f000 fd13 	bl	8002710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f000 f808 	bl	8001d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf0:	f7ff fe2a 	bl	8001948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023c00 	.word	0x40023c00

08001d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_InitTick+0x54>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_InitTick+0x58>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fd1d 	bl	800275e <HAL_SYSTICK_Config>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00e      	b.n	8001d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b0f      	cmp	r3, #15
 8001d32:	d80a      	bhi.n	8001d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d34:	2200      	movs	r2, #0
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f000 fcf3 	bl	8002726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d40:	4a06      	ldr	r2, [pc, #24]	; (8001d5c <HAL_InitTick+0x5c>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e000      	b.n	8001d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000020 	.word	0x20000020
 8001d58:	20000028 	.word	0x20000028
 8001d5c:	20000024 	.word	0x20000024

08001d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_IncTick+0x20>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_IncTick+0x24>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <HAL_IncTick+0x24>)
 8001d72:	6013      	str	r3, [r2, #0]
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000028 	.word	0x20000028
 8001d84:	200001bc 	.word	0x200001bc

08001d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_GetTick+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	200001bc 	.word	0x200001bc

08001da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff ffee 	bl	8001d88 <HAL_GetTick>
 8001dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d005      	beq.n	8001dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_Delay+0x44>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dc6:	bf00      	nop
 8001dc8:	f7ff ffde 	bl	8001d88 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d8f7      	bhi.n	8001dc8 <HAL_Delay+0x28>
  {
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000028 	.word	0x20000028

08001de8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e033      	b.n	8001e66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff fdc6 	bl	8001998 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e2e:	f023 0302 	bic.w	r3, r3, #2
 8001e32:	f043 0202 	orr.w	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 faba 	bl	80023b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f023 0303 	bic.w	r3, r3, #3
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40
 8001e56:	e001      	b.n	8001e5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_Start+0x1a>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e097      	b.n	8001fba <HAL_ADC_Start+0x14a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d018      	beq.n	8001ed2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb0:	4b45      	ldr	r3, [pc, #276]	; (8001fc8 <HAL_ADC_Start+0x158>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a45      	ldr	r2, [pc, #276]	; (8001fcc <HAL_ADC_Start+0x15c>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	0c9a      	lsrs	r2, r3, #18
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ec4:	e002      	b.n	8001ecc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f9      	bne.n	8001ec6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d15f      	bne.n	8001fa0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1e:	d106      	bne.n	8001f2e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	f023 0206 	bic.w	r2, r3, #6
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	645a      	str	r2, [r3, #68]	; 0x44
 8001f2c:	e002      	b.n	8001f34 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f3c:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <HAL_ADC_Start+0x160>)
 8001f3e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f48:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10f      	bne.n	8001f76 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d129      	bne.n	8001fb8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	e020      	b.n	8001fb8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <HAL_ADC_Start+0x164>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_ADC_Start+0x148>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d114      	bne.n	8001fb8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f043 0210 	orr.w	r2, r3, #16
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	f043 0201 	orr.w	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000020 	.word	0x20000020
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	40012300 	.word	0x40012300
 8001fd4:	40012000 	.word	0x40012000

08001fd8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_ADC_Stop+0x16>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e021      	b.n	8002032 <HAL_ADC_Stop+0x5a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205a:	d113      	bne.n	8002084 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800206a:	d10b      	bne.n	8002084 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	f043 0220 	orr.w	r2, r3, #32
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e063      	b.n	800214c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002084:	f7ff fe80 	bl	8001d88 <HAL_GetTick>
 8002088:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800208a:	e021      	b.n	80020d0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002092:	d01d      	beq.n	80020d0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <HAL_ADC_PollForConversion+0x6c>
 800209a:	f7ff fe75 	bl	8001d88 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d212      	bcs.n	80020d0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d00b      	beq.n	80020d0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	f043 0204 	orr.w	r2, r3, #4
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e03d      	b.n	800214c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d1d6      	bne.n	800208c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f06f 0212 	mvn.w	r2, #18
 80020e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d123      	bne.n	800214a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002106:	2b00      	cmp	r3, #0
 8002108:	d11f      	bne.n	800214a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002114:	2b00      	cmp	r3, #0
 8002116:	d006      	beq.n	8002126 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002122:	2b00      	cmp	r3, #0
 8002124:	d111      	bne.n	800214a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d105      	bne.n	800214a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f043 0201 	orr.w	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1c>
 8002188:	2302      	movs	r3, #2
 800218a:	e105      	b.n	8002398 <HAL_ADC_ConfigChannel+0x228>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b09      	cmp	r3, #9
 800219a:	d925      	bls.n	80021e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68d9      	ldr	r1, [r3, #12]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	3b1e      	subs	r3, #30
 80021b2:	2207      	movs	r2, #7
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43da      	mvns	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	400a      	ands	r2, r1
 80021c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68d9      	ldr	r1, [r3, #12]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4403      	add	r3, r0
 80021da:	3b1e      	subs	r3, #30
 80021dc:	409a      	lsls	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	e022      	b.n	800222e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6919      	ldr	r1, [r3, #16]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	2207      	movs	r2, #7
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	400a      	ands	r2, r1
 800220a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6919      	ldr	r1, [r3, #16]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	4618      	mov	r0, r3
 800221e:	4603      	mov	r3, r0
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4403      	add	r3, r0
 8002224:	409a      	lsls	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b06      	cmp	r3, #6
 8002234:	d824      	bhi.n	8002280 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	3b05      	subs	r3, #5
 8002248:	221f      	movs	r2, #31
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	400a      	ands	r2, r1
 8002256:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	4618      	mov	r0, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	3b05      	subs	r3, #5
 8002272:	fa00 f203 	lsl.w	r2, r0, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	635a      	str	r2, [r3, #52]	; 0x34
 800227e:	e04c      	b.n	800231a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b0c      	cmp	r3, #12
 8002286:	d824      	bhi.n	80022d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	3b23      	subs	r3, #35	; 0x23
 800229a:	221f      	movs	r2, #31
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43da      	mvns	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	400a      	ands	r2, r1
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	3b23      	subs	r3, #35	; 0x23
 80022c4:	fa00 f203 	lsl.w	r2, r0, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
 80022d0:	e023      	b.n	800231a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	3b41      	subs	r3, #65	; 0x41
 80022e4:	221f      	movs	r2, #31
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	400a      	ands	r2, r1
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	4618      	mov	r0, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	3b41      	subs	r3, #65	; 0x41
 800230e:	fa00 f203 	lsl.w	r2, r0, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_ADC_ConfigChannel+0x234>)
 800231c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a21      	ldr	r2, [pc, #132]	; (80023a8 <HAL_ADC_ConfigChannel+0x238>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d109      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1cc>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b12      	cmp	r3, #18
 800232e:	d105      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <HAL_ADC_ConfigChannel+0x238>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d123      	bne.n	800238e <HAL_ADC_ConfigChannel+0x21e>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b10      	cmp	r3, #16
 800234c:	d003      	beq.n	8002356 <HAL_ADC_ConfigChannel+0x1e6>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b11      	cmp	r3, #17
 8002354:	d11b      	bne.n	800238e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b10      	cmp	r3, #16
 8002368:	d111      	bne.n	800238e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_ADC_ConfigChannel+0x23c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <HAL_ADC_ConfigChannel+0x240>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	0c9a      	lsrs	r2, r3, #18
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002380:	e002      	b.n	8002388 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3b01      	subs	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40012300 	.word	0x40012300
 80023a8:	40012000 	.word	0x40012000
 80023ac:	20000020 	.word	0x20000020
 80023b0:	431bde83 	.word	0x431bde83

080023b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023bc:	4b79      	ldr	r3, [pc, #484]	; (80025a4 <ADC_Init+0x1f0>)
 80023be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	021a      	lsls	r2, r3, #8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800240c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800242e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6899      	ldr	r1, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	4a58      	ldr	r2, [pc, #352]	; (80025a8 <ADC_Init+0x1f4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d022      	beq.n	8002492 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800245a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6899      	ldr	r1, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800247c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6899      	ldr	r1, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	e00f      	b.n	80024b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0202 	bic.w	r2, r2, #2
 80024c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6899      	ldr	r1, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7e1b      	ldrb	r3, [r3, #24]
 80024cc:	005a      	lsls	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01b      	beq.n	8002518 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	3b01      	subs	r3, #1
 800250c:	035a      	lsls	r2, r3, #13
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	e007      	b.n	8002528 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002526:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	3b01      	subs	r3, #1
 8002544:	051a      	lsls	r2, r3, #20
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800255c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800256a:	025a      	lsls	r2, r3, #9
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002582:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6899      	ldr	r1, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	029a      	lsls	r2, r3, #10
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40012300 	.word	0x40012300
 80025a8:	0f000001 	.word	0x0f000001

080025ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db0a      	blt.n	800263a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	490c      	ldr	r1, [pc, #48]	; (800265c <__NVIC_SetPriority+0x4c>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	440b      	add	r3, r1
 8002634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002638:	e00a      	b.n	8002650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4908      	ldr	r1, [pc, #32]	; (8002660 <__NVIC_SetPriority+0x50>)
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3b04      	subs	r3, #4
 8002648:	0112      	lsls	r2, r2, #4
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	440b      	add	r3, r1
 800264e:	761a      	strb	r2, [r3, #24]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000e100 	.word	0xe000e100
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f1c3 0307 	rsb	r3, r3, #7
 800267e:	2b04      	cmp	r3, #4
 8002680:	bf28      	it	cs
 8002682:	2304      	movcs	r3, #4
 8002684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3304      	adds	r3, #4
 800268a:	2b06      	cmp	r3, #6
 800268c:	d902      	bls.n	8002694 <NVIC_EncodePriority+0x30>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3b03      	subs	r3, #3
 8002692:	e000      	b.n	8002696 <NVIC_EncodePriority+0x32>
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	401a      	ands	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43d9      	mvns	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	4313      	orrs	r3, r2
         );
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3724      	adds	r7, #36	; 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026dc:	d301      	bcc.n	80026e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026de:	2301      	movs	r3, #1
 80026e0:	e00f      	b.n	8002702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <SysTick_Config+0x40>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ea:	210f      	movs	r1, #15
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	f7ff ff8e 	bl	8002610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <SysTick_Config+0x40>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <SysTick_Config+0x40>)
 80026fc:	2207      	movs	r2, #7
 80026fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	e000e010 	.word	0xe000e010

08002710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ff47 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002738:	f7ff ff5c 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 800273c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	6978      	ldr	r0, [r7, #20]
 8002744:	f7ff ff8e 	bl	8002664 <NVIC_EncodePriority>
 8002748:	4602      	mov	r2, r0
 800274a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff5d 	bl	8002610 <__NVIC_SetPriority>
}
 8002756:	bf00      	nop
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffb0 	bl	80026cc <SysTick_Config>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	e159      	b.n	8002a48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002794:	2201      	movs	r2, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	f040 8148 	bne.w	8002a42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d005      	beq.n	80027ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d130      	bne.n	800282c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002800:	2201      	movs	r2, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 0201 	and.w	r2, r3, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b03      	cmp	r3, #3
 8002836:	d017      	beq.n	8002868 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d123      	bne.n	80028bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3208      	adds	r2, #8
 800287c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	220f      	movs	r2, #15
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	08da      	lsrs	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3208      	adds	r2, #8
 80028b6:	69b9      	ldr	r1, [r7, #24]
 80028b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0203 	and.w	r2, r3, #3
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a2 	beq.w	8002a42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b57      	ldr	r3, [pc, #348]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a56      	ldr	r2, [pc, #344]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b54      	ldr	r3, [pc, #336]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291a:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_GPIO_Init+0x2ec>)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a49      	ldr	r2, [pc, #292]	; (8002a68 <HAL_GPIO_Init+0x2f0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d019      	beq.n	800297a <HAL_GPIO_Init+0x202>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a48      	ldr	r2, [pc, #288]	; (8002a6c <HAL_GPIO_Init+0x2f4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0x1fe>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a47      	ldr	r2, [pc, #284]	; (8002a70 <HAL_GPIO_Init+0x2f8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_Init+0x1fa>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a46      	ldr	r2, [pc, #280]	; (8002a74 <HAL_GPIO_Init+0x2fc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_Init+0x1f6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a45      	ldr	r2, [pc, #276]	; (8002a78 <HAL_GPIO_Init+0x300>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_Init+0x1f2>
 8002966:	2304      	movs	r3, #4
 8002968:	e008      	b.n	800297c <HAL_GPIO_Init+0x204>
 800296a:	2307      	movs	r3, #7
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x204>
 800296e:	2303      	movs	r3, #3
 8002970:	e004      	b.n	800297c <HAL_GPIO_Init+0x204>
 8002972:	2302      	movs	r3, #2
 8002974:	e002      	b.n	800297c <HAL_GPIO_Init+0x204>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x204>
 800297a:	2300      	movs	r3, #0
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f002 0203 	and.w	r2, r2, #3
 8002982:	0092      	lsls	r2, r2, #2
 8002984:	4093      	lsls	r3, r2
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298c:	4935      	ldr	r1, [pc, #212]	; (8002a64 <HAL_GPIO_Init+0x2ec>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299a:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <HAL_GPIO_Init+0x304>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029be:	4a2f      	ldr	r2, [pc, #188]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c4:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029e8:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ee:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a12:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <HAL_GPIO_Init+0x304>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_GPIO_Init+0x304>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a3c:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <HAL_GPIO_Init+0x304>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3301      	adds	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	f67f aea2 	bls.w	8002794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40013c00 	.word	0x40013c00

08002a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	887b      	ldrh	r3, [r7, #2]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	e001      	b.n	8002aa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
 8002abc:	4613      	mov	r3, r2
 8002abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac0:	787b      	ldrb	r3, [r7, #1]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002acc:	e003      	b.n	8002ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	041a      	lsls	r2, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	619a      	str	r2, [r3, #24]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e12b      	b.n	8002d4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe ff88 	bl	8001a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	; 0x24
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b48:	f001 fbd2 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8002b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4a81      	ldr	r2, [pc, #516]	; (8002d58 <HAL_I2C_Init+0x274>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d807      	bhi.n	8002b68 <HAL_I2C_Init+0x84>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4a80      	ldr	r2, [pc, #512]	; (8002d5c <HAL_I2C_Init+0x278>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	bf94      	ite	ls
 8002b60:	2301      	movls	r3, #1
 8002b62:	2300      	movhi	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e006      	b.n	8002b76 <HAL_I2C_Init+0x92>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a7d      	ldr	r2, [pc, #500]	; (8002d60 <HAL_I2C_Init+0x27c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	bf94      	ite	ls
 8002b70:	2301      	movls	r3, #1
 8002b72:	2300      	movhi	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0e7      	b.n	8002d4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a78      	ldr	r2, [pc, #480]	; (8002d64 <HAL_I2C_Init+0x280>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0c9b      	lsrs	r3, r3, #18
 8002b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a6a      	ldr	r2, [pc, #424]	; (8002d58 <HAL_I2C_Init+0x274>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d802      	bhi.n	8002bb8 <HAL_I2C_Init+0xd4>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	e009      	b.n	8002bcc <HAL_I2C_Init+0xe8>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	4a69      	ldr	r2, [pc, #420]	; (8002d68 <HAL_I2C_Init+0x284>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	3301      	adds	r3, #1
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	495c      	ldr	r1, [pc, #368]	; (8002d58 <HAL_I2C_Init+0x274>)
 8002be8:	428b      	cmp	r3, r1
 8002bea:	d819      	bhi.n	8002c20 <HAL_I2C_Init+0x13c>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1e59      	subs	r1, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bfa:	1c59      	adds	r1, r3, #1
 8002bfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c00:	400b      	ands	r3, r1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_I2C_Init+0x138>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1e59      	subs	r1, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1a:	e051      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	e04f      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d111      	bne.n	8002c4c <HAL_I2C_Init+0x168>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1e58      	subs	r0, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	440b      	add	r3, r1
 8002c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e012      	b.n	8002c72 <HAL_I2C_Init+0x18e>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e58      	subs	r0, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	0099      	lsls	r1, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Init+0x196>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e022      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10e      	bne.n	8002ca0 <HAL_I2C_Init+0x1bc>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1e58      	subs	r0, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	440b      	add	r3, r1
 8002c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9e:	e00f      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1e58      	subs	r0, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	0099      	lsls	r1, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	6809      	ldr	r1, [r1, #0]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6911      	ldr	r1, [r2, #16]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68d2      	ldr	r2, [r2, #12]
 8002cfa:	4311      	orrs	r1, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	000186a0 	.word	0x000186a0
 8002d5c:	001e847f 	.word	0x001e847f
 8002d60:	003d08ff 	.word	0x003d08ff
 8002d64:	431bde83 	.word	0x431bde83
 8002d68:	10624dd3 	.word	0x10624dd3

08002d6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	461a      	mov	r2, r3
 8002d78:	460b      	mov	r3, r1
 8002d7a:	817b      	strh	r3, [r7, #10]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d80:	f7ff f802 	bl	8001d88 <HAL_GetTick>
 8002d84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	f040 80e0 	bne.w	8002f54 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2319      	movs	r3, #25
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	4970      	ldr	r1, [pc, #448]	; (8002f60 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fc58 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
 8002dac:	e0d3      	b.n	8002f56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_I2C_Master_Transmit+0x50>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e0cc      	b.n	8002f56 <HAL_I2C_Master_Transmit+0x1ea>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d007      	beq.n	8002de2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0201 	orr.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2221      	movs	r2, #33	; 0x21
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2210      	movs	r2, #16
 8002dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	893a      	ldrh	r2, [r7, #8]
 8002e12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a50      	ldr	r2, [pc, #320]	; (8002f64 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e24:	8979      	ldrh	r1, [r7, #10]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	6a3a      	ldr	r2, [r7, #32]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fac2 	bl	80033b4 <I2C_MasterRequestWrite>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e08d      	b.n	8002f56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e50:	e066      	b.n	8002f20 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	6a39      	ldr	r1, [r7, #32]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 fcd2 	bl	8003800 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00d      	beq.n	8002e7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d107      	bne.n	8002e7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e06b      	b.n	8002f56 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d11b      	bne.n	8002ef4 <HAL_I2C_Master_Transmit+0x188>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d017      	beq.n	8002ef4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	6a39      	ldr	r1, [r7, #32]
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fcc2 	bl	8003882 <I2C_WaitOnBTFFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00d      	beq.n	8002f20 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d107      	bne.n	8002f1c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e01a      	b.n	8002f56 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d194      	bne.n	8002e52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	00100002 	.word	0x00100002
 8002f64:	ffff0000 	.word	0xffff0000

08002f68 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08c      	sub	sp, #48	; 0x30
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	461a      	mov	r2, r3
 8002f74:	460b      	mov	r3, r1
 8002f76:	817b      	strh	r3, [r7, #10]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f7c:	f7fe ff04 	bl	8001d88 <HAL_GetTick>
 8002f80:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	f040 820b 	bne.w	80033a6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	2319      	movs	r3, #25
 8002f96:	2201      	movs	r2, #1
 8002f98:	497c      	ldr	r1, [pc, #496]	; (800318c <HAL_I2C_Master_Receive+0x224>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fb5a 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e1fe      	b.n	80033a8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_I2C_Master_Receive+0x50>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e1f7      	b.n	80033a8 <HAL_I2C_Master_Receive+0x440>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d007      	beq.n	8002fde <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2222      	movs	r2, #34	; 0x22
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	893a      	ldrh	r2, [r7, #8]
 800300e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4a5c      	ldr	r2, [pc, #368]	; (8003190 <HAL_I2C_Master_Receive+0x228>)
 800301e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003020:	8979      	ldrh	r1, [r7, #10]
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fa46 	bl	80034b8 <I2C_MasterRequestRead>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1b8      	b.n	80033a8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	2b00      	cmp	r3, #0
 800303c:	d113      	bne.n	8003066 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e18c      	b.n	8003380 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306a:	2b01      	cmp	r3, #1
 800306c:	d11b      	bne.n	80030a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	e16c      	b.n	8003380 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d11b      	bne.n	80030e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ce:	2300      	movs	r3, #0
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	e14c      	b.n	8003380 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800310c:	e138      	b.n	8003380 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003112:	2b03      	cmp	r3, #3
 8003114:	f200 80f1 	bhi.w	80032fa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	2b01      	cmp	r3, #1
 800311e:	d123      	bne.n	8003168 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fbed 	bl	8003904 <I2C_WaitOnRXNEFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e139      	b.n	80033a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003166:	e10b      	b.n	8003380 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316c:	2b02      	cmp	r3, #2
 800316e:	d14e      	bne.n	800320e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	2200      	movs	r2, #0
 8003178:	4906      	ldr	r1, [pc, #24]	; (8003194 <HAL_I2C_Master_Receive+0x22c>)
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 fa6a 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e10e      	b.n	80033a8 <HAL_I2C_Master_Receive+0x440>
 800318a:	bf00      	nop
 800318c:	00100002 	.word	0x00100002
 8003190:	ffff0000 	.word	0xffff0000
 8003194:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800320c:	e0b8      	b.n	8003380 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	2200      	movs	r2, #0
 8003216:	4966      	ldr	r1, [pc, #408]	; (80033b0 <HAL_I2C_Master_Receive+0x448>)
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fa1b 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0bf      	b.n	80033a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	2200      	movs	r2, #0
 8003272:	494f      	ldr	r1, [pc, #316]	; (80033b0 <HAL_I2C_Master_Receive+0x448>)
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f9ed 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e091      	b.n	80033a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032f8:	e042      	b.n	8003380 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fb00 	bl	8003904 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e04c      	b.n	80033a8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b04      	cmp	r3, #4
 800334c:	d118      	bne.n	8003380 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	f47f aec2 	bne.w	800310e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e000      	b.n	80033a8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
  }
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3728      	adds	r7, #40	; 0x28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	00010004 	.word	0x00010004

080033b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	460b      	mov	r3, r1
 80033c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d006      	beq.n	80033de <I2C_MasterRequestWrite+0x2a>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d003      	beq.n	80033de <I2C_MasterRequestWrite+0x2a>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033dc:	d108      	bne.n	80033f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e00b      	b.n	8003408 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	2b12      	cmp	r3, #18
 80033f6:	d107      	bne.n	8003408 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003406:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f91d 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00d      	beq.n	800343c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800342e:	d103      	bne.n	8003438 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003436:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e035      	b.n	80034a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003444:	d108      	bne.n	8003458 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003446:	897b      	ldrh	r3, [r7, #10]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003454:	611a      	str	r2, [r3, #16]
 8003456:	e01b      	b.n	8003490 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003458:	897b      	ldrh	r3, [r7, #10]
 800345a:	11db      	asrs	r3, r3, #7
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f003 0306 	and.w	r3, r3, #6
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f063 030f 	orn	r3, r3, #15
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	490e      	ldr	r1, [pc, #56]	; (80034b0 <I2C_MasterRequestWrite+0xfc>)
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f943 	bl	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e010      	b.n	80034a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003486:	897b      	ldrh	r3, [r7, #10]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	4907      	ldr	r1, [pc, #28]	; (80034b4 <I2C_MasterRequestWrite+0x100>)
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f933 	bl	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	00010008 	.word	0x00010008
 80034b4:	00010002 	.word	0x00010002

080034b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	460b      	mov	r3, r1
 80034c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d006      	beq.n	80034f2 <I2C_MasterRequestRead+0x3a>
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d003      	beq.n	80034f2 <I2C_MasterRequestRead+0x3a>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034f0:	d108      	bne.n	8003504 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e00b      	b.n	800351c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	2b11      	cmp	r3, #17
 800350a:	d107      	bne.n	800351c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800351a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f893 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00d      	beq.n	8003550 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003542:	d103      	bne.n	800354c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800354a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e079      	b.n	8003644 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003558:	d108      	bne.n	800356c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800355a:	897b      	ldrh	r3, [r7, #10]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	b2da      	uxtb	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	611a      	str	r2, [r3, #16]
 800356a:	e05f      	b.n	800362c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800356c:	897b      	ldrh	r3, [r7, #10]
 800356e:	11db      	asrs	r3, r3, #7
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f003 0306 	and.w	r3, r3, #6
 8003576:	b2db      	uxtb	r3, r3
 8003578:	f063 030f 	orn	r3, r3, #15
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	4930      	ldr	r1, [pc, #192]	; (800364c <I2C_MasterRequestRead+0x194>)
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f8b9 	bl	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e054      	b.n	8003644 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800359a:	897b      	ldrh	r3, [r7, #10]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	4929      	ldr	r1, [pc, #164]	; (8003650 <I2C_MasterRequestRead+0x198>)
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f8a9 	bl	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e044      	b.n	8003644 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f831 	bl	8003654 <I2C_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00d      	beq.n	8003614 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003606:	d103      	bne.n	8003610 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800360e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e017      	b.n	8003644 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003614:	897b      	ldrh	r3, [r7, #10]
 8003616:	11db      	asrs	r3, r3, #7
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 0306 	and.w	r3, r3, #6
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f063 030e 	orn	r3, r3, #14
 8003624:	b2da      	uxtb	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	4907      	ldr	r1, [pc, #28]	; (8003650 <I2C_MasterRequestRead+0x198>)
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f865 	bl	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	00010008 	.word	0x00010008
 8003650:	00010002 	.word	0x00010002

08003654 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003664:	e025      	b.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d021      	beq.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366e:	f7fe fb8b 	bl	8001d88 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <I2C_WaitOnFlagUntilTimeout+0x30>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d116      	bne.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f043 0220 	orr.w	r2, r3, #32
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e023      	b.n	80036fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d10d      	bne.n	80036d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4013      	ands	r3, r2
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf0c      	ite	eq
 80036ce:	2301      	moveq	r3, #1
 80036d0:	2300      	movne	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	e00c      	b.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	43da      	mvns	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4013      	ands	r3, r2
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bf0c      	ite	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	2300      	movne	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d0b6      	beq.n	8003666 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003710:	e051      	b.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003720:	d123      	bne.n	800376a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003730:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800373a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f043 0204 	orr.w	r2, r3, #4
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e046      	b.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d021      	beq.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003772:	f7fe fb09 	bl	8001d88 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	429a      	cmp	r2, r3
 8003780:	d302      	bcc.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d116      	bne.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f043 0220 	orr.w	r2, r3, #32
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e020      	b.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d10c      	bne.n	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	43da      	mvns	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4013      	ands	r3, r2
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	bf14      	ite	ne
 80037d2:	2301      	movne	r3, #1
 80037d4:	2300      	moveq	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	e00b      	b.n	80037f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	43da      	mvns	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4013      	ands	r3, r2
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d18d      	bne.n	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800380c:	e02d      	b.n	800386a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f8ce 	bl	80039b0 <I2C_IsAcknowledgeFailed>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e02d      	b.n	800387a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d021      	beq.n	800386a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7fe faaf 	bl	8001d88 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d116      	bne.n	800386a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f043 0220 	orr.w	r2, r3, #32
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e007      	b.n	800387a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003874:	2b80      	cmp	r3, #128	; 0x80
 8003876:	d1ca      	bne.n	800380e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800388e:	e02d      	b.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f88d 	bl	80039b0 <I2C_IsAcknowledgeFailed>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e02d      	b.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a6:	d021      	beq.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a8:	f7fe fa6e 	bl	8001d88 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d302      	bcc.n	80038be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d116      	bne.n	80038ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e007      	b.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d1ca      	bne.n	8003890 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003910:	e042      	b.n	8003998 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b10      	cmp	r3, #16
 800391e:	d119      	bne.n	8003954 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0210 	mvn.w	r2, #16
 8003928:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e029      	b.n	80039a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003954:	f7fe fa18 	bl	8001d88 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	429a      	cmp	r2, r3
 8003962:	d302      	bcc.n	800396a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d116      	bne.n	8003998 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	f043 0220 	orr.w	r2, r3, #32
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e007      	b.n	80039a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d1b5      	bne.n	8003912 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c6:	d11b      	bne.n	8003a00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	f043 0204 	orr.w	r2, r3, #4
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e267      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d075      	beq.n	8003b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2e:	4b88      	ldr	r3, [pc, #544]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d00c      	beq.n	8003a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3a:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d112      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a46:	4b82      	ldr	r3, [pc, #520]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a52:	d10b      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	4b7e      	ldr	r3, [pc, #504]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d05b      	beq.n	8003b18 <HAL_RCC_OscConfig+0x108>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d157      	bne.n	8003b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e242      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d106      	bne.n	8003a84 <HAL_RCC_OscConfig+0x74>
 8003a76:	4b76      	ldr	r3, [pc, #472]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a75      	ldr	r2, [pc, #468]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e01d      	b.n	8003ac0 <HAL_RCC_OscConfig+0xb0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x98>
 8003a8e:	4b70      	ldr	r3, [pc, #448]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a6f      	ldr	r2, [pc, #444]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b6d      	ldr	r3, [pc, #436]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6c      	ldr	r2, [pc, #432]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCC_OscConfig+0xb0>
 8003aa8:	4b69      	ldr	r3, [pc, #420]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a68      	ldr	r2, [pc, #416]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a65      	ldr	r2, [pc, #404]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fe f95e 	bl	8001d88 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fe f95a 	bl	8001d88 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e207      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b5b      	ldr	r3, [pc, #364]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xc0>
 8003aee:	e014      	b.n	8003b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fe f94a 	bl	8001d88 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fe f946 	bl	8001d88 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1f3      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	4b51      	ldr	r3, [pc, #324]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0xe8>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d063      	beq.n	8003bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b26:	4b4a      	ldr	r3, [pc, #296]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b32:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d11c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3e:	4b44      	ldr	r3, [pc, #272]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d116      	bne.n	8003b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_RCC_OscConfig+0x152>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e1c7      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b62:	4b3b      	ldr	r3, [pc, #236]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4937      	ldr	r1, [pc, #220]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	e03a      	b.n	8003bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d020      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b80:	4b34      	ldr	r3, [pc, #208]	; (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fe f8ff 	bl	8001d88 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8e:	f7fe f8fb 	bl	8001d88 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1a8      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba0:	4b2b      	ldr	r3, [pc, #172]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bac:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4925      	ldr	r1, [pc, #148]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]
 8003bc0:	e015      	b.n	8003bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc2:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fe f8de 	bl	8001d88 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd0:	f7fe f8da 	bl	8001d88 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e187      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be2:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d036      	beq.n	8003c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d016      	beq.n	8003c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <HAL_RCC_OscConfig+0x248>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fe f8be 	bl	8001d88 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c10:	f7fe f8ba 	bl	8001d88 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e167      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x200>
 8003c2e:	e01b      	b.n	8003c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_RCC_OscConfig+0x248>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c36:	f7fe f8a7 	bl	8001d88 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3c:	e00e      	b.n	8003c5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3e:	f7fe f8a3 	bl	8001d88 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d907      	bls.n	8003c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e150      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
 8003c50:	40023800 	.word	0x40023800
 8003c54:	42470000 	.word	0x42470000
 8003c58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5c:	4b88      	ldr	r3, [pc, #544]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ea      	bne.n	8003c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8097 	beq.w	8003da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c7a:	4b81      	ldr	r3, [pc, #516]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10f      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	4b7d      	ldr	r3, [pc, #500]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4a7c      	ldr	r2, [pc, #496]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c94:	6413      	str	r3, [r2, #64]	; 0x40
 8003c96:	4b7a      	ldr	r3, [pc, #488]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca6:	4b77      	ldr	r3, [pc, #476]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d118      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cb2:	4b74      	ldr	r3, [pc, #464]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a73      	ldr	r2, [pc, #460]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cbe:	f7fe f863 	bl	8001d88 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc6:	f7fe f85f 	bl	8001d88 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e10c      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd8:	4b6a      	ldr	r3, [pc, #424]	; (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d106      	bne.n	8003cfa <HAL_RCC_OscConfig+0x2ea>
 8003cec:	4b64      	ldr	r3, [pc, #400]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a63      	ldr	r2, [pc, #396]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf8:	e01c      	b.n	8003d34 <HAL_RCC_OscConfig+0x324>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b05      	cmp	r3, #5
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x30c>
 8003d02:	4b5f      	ldr	r3, [pc, #380]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	4a5e      	ldr	r2, [pc, #376]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0e:	4b5c      	ldr	r3, [pc, #368]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	4a5b      	ldr	r2, [pc, #364]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0x324>
 8003d1c:	4b58      	ldr	r3, [pc, #352]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	4a57      	ldr	r2, [pc, #348]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	6713      	str	r3, [r2, #112]	; 0x70
 8003d28:	4b55      	ldr	r3, [pc, #340]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	4a54      	ldr	r2, [pc, #336]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f023 0304 	bic.w	r3, r3, #4
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d015      	beq.n	8003d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3c:	f7fe f824 	bl	8001d88 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fe f820 	bl	8001d88 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0cb      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5a:	4b49      	ldr	r3, [pc, #292]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0ee      	beq.n	8003d44 <HAL_RCC_OscConfig+0x334>
 8003d66:	e014      	b.n	8003d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d68:	f7fe f80e 	bl	8001d88 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d70:	f7fe f80a 	bl	8001d88 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e0b5      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d86:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1ee      	bne.n	8003d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d105      	bne.n	8003da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d98:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	4a38      	ldr	r2, [pc, #224]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80a1 	beq.w	8003ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dae:	4b34      	ldr	r3, [pc, #208]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d05c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d141      	bne.n	8003e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc2:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fd ffde 	bl	8001d88 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fd ffda 	bl	8001d88 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e087      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	3b01      	subs	r3, #1
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	491b      	ldr	r1, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fd ffb3 	bl	8001d88 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fd ffaf 	bl	8001d88 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e05c      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x416>
 8003e44:	e054      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fd ff9c 	bl	8001d88 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fd ff98 	bl	8001d88 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e045      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x444>
 8003e72:	e03d      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e038      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40007000 	.word	0x40007000
 8003e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e8c:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <HAL_RCC_OscConfig+0x4ec>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d028      	beq.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d121      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d11a      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d111      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800

08003f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0cc      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f14:	4b68      	ldr	r3, [pc, #416]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d90c      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b65      	ldr	r3, [pc, #404]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b63      	ldr	r3, [pc, #396]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0b8      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d020      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f54:	4b59      	ldr	r3, [pc, #356]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4a58      	ldr	r2, [pc, #352]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4a52      	ldr	r2, [pc, #328]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f78:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	494d      	ldr	r1, [pc, #308]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d044      	beq.n	8004020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d107      	bne.n	8003fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	4b47      	ldr	r3, [pc, #284]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d119      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e07f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d107      	bne.n	8003fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbe:	4b3f      	ldr	r3, [pc, #252]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e06f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fce:	4b3b      	ldr	r3, [pc, #236]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e067      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fde:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f023 0203 	bic.w	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4934      	ldr	r1, [pc, #208]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ff0:	f7fd feca 	bl	8001d88 <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff8:	f7fd fec6 	bl	8001d88 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e04f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400e:	4b2b      	ldr	r3, [pc, #172]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 020c 	and.w	r2, r3, #12
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	429a      	cmp	r2, r3
 800401e:	d1eb      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004020:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d20c      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e032      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4916      	ldr	r1, [pc, #88]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	490e      	ldr	r1, [pc, #56]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004086:	f000 f821 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 800408a:	4602      	mov	r2, r0
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	490a      	ldr	r1, [pc, #40]	; (80040c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	5ccb      	ldrb	r3, [r1, r3]
 800409a:	fa22 f303 	lsr.w	r3, r2, r3
 800409e:	4a09      	ldr	r2, [pc, #36]	; (80040c4 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fd fe2a 	bl	8001d00 <HAL_InitTick>

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023c00 	.word	0x40023c00
 80040bc:	40023800 	.word	0x40023800
 80040c0:	08004b54 	.word	0x08004b54
 80040c4:	20000020 	.word	0x20000020
 80040c8:	20000024 	.word	0x20000024

080040cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d0:	b094      	sub	sp, #80	; 0x50
 80040d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	647b      	str	r3, [r7, #68]	; 0x44
 80040d8:	2300      	movs	r3, #0
 80040da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040dc:	2300      	movs	r3, #0
 80040de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e4:	4b79      	ldr	r3, [pc, #484]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d00d      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x40>
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	f200 80e1 	bhi.w	80042b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x34>
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d003      	beq.n	8004106 <HAL_RCC_GetSysClockFreq+0x3a>
 80040fe:	e0db      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004100:	4b73      	ldr	r3, [pc, #460]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004102:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004104:	e0db      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004106:	4b73      	ldr	r3, [pc, #460]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004108:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800410a:	e0d8      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800410c:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004114:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004116:	4b6d      	ldr	r3, [pc, #436]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d063      	beq.n	80041ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004122:	4b6a      	ldr	r3, [pc, #424]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	099b      	lsrs	r3, r3, #6
 8004128:	2200      	movs	r2, #0
 800412a:	63bb      	str	r3, [r7, #56]	; 0x38
 800412c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800412e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004134:	633b      	str	r3, [r7, #48]	; 0x30
 8004136:	2300      	movs	r3, #0
 8004138:	637b      	str	r3, [r7, #52]	; 0x34
 800413a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800413e:	4622      	mov	r2, r4
 8004140:	462b      	mov	r3, r5
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f04f 0100 	mov.w	r1, #0
 800414a:	0159      	lsls	r1, r3, #5
 800414c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004150:	0150      	lsls	r0, r2, #5
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4621      	mov	r1, r4
 8004158:	1a51      	subs	r1, r2, r1
 800415a:	6139      	str	r1, [r7, #16]
 800415c:	4629      	mov	r1, r5
 800415e:	eb63 0301 	sbc.w	r3, r3, r1
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004170:	4659      	mov	r1, fp
 8004172:	018b      	lsls	r3, r1, #6
 8004174:	4651      	mov	r1, sl
 8004176:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800417a:	4651      	mov	r1, sl
 800417c:	018a      	lsls	r2, r1, #6
 800417e:	4651      	mov	r1, sl
 8004180:	ebb2 0801 	subs.w	r8, r2, r1
 8004184:	4659      	mov	r1, fp
 8004186:	eb63 0901 	sbc.w	r9, r3, r1
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800419a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800419e:	4690      	mov	r8, r2
 80041a0:	4699      	mov	r9, r3
 80041a2:	4623      	mov	r3, r4
 80041a4:	eb18 0303 	adds.w	r3, r8, r3
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	462b      	mov	r3, r5
 80041ac:	eb49 0303 	adc.w	r3, r9, r3
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041be:	4629      	mov	r1, r5
 80041c0:	024b      	lsls	r3, r1, #9
 80041c2:	4621      	mov	r1, r4
 80041c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041c8:	4621      	mov	r1, r4
 80041ca:	024a      	lsls	r2, r1, #9
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d2:	2200      	movs	r2, #0
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041dc:	f7fb fffa 	bl	80001d4 <__aeabi_uldivmod>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4613      	mov	r3, r2
 80041e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041e8:	e058      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ea:	4b38      	ldr	r3, [pc, #224]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	099b      	lsrs	r3, r3, #6
 80041f0:	2200      	movs	r2, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	4611      	mov	r1, r2
 80041f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041fa:	623b      	str	r3, [r7, #32]
 80041fc:	2300      	movs	r3, #0
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004200:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	f04f 0000 	mov.w	r0, #0
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	0159      	lsls	r1, r3, #5
 8004212:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004216:	0150      	lsls	r0, r2, #5
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4641      	mov	r1, r8
 800421e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004222:	4649      	mov	r1, r9
 8004224:	eb63 0b01 	sbc.w	fp, r3, r1
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004234:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004238:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800423c:	ebb2 040a 	subs.w	r4, r2, sl
 8004240:	eb63 050b 	sbc.w	r5, r3, fp
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	00eb      	lsls	r3, r5, #3
 800424e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004252:	00e2      	lsls	r2, r4, #3
 8004254:	4614      	mov	r4, r2
 8004256:	461d      	mov	r5, r3
 8004258:	4643      	mov	r3, r8
 800425a:	18e3      	adds	r3, r4, r3
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	464b      	mov	r3, r9
 8004260:	eb45 0303 	adc.w	r3, r5, r3
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004272:	4629      	mov	r1, r5
 8004274:	028b      	lsls	r3, r1, #10
 8004276:	4621      	mov	r1, r4
 8004278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800427c:	4621      	mov	r1, r4
 800427e:	028a      	lsls	r2, r1, #10
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004286:	2200      	movs	r2, #0
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	61fa      	str	r2, [r7, #28]
 800428c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004290:	f7fb ffa0 	bl	80001d4 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4613      	mov	r3, r2
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <HAL_RCC_GetSysClockFreq+0x200>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	3301      	adds	r3, #1
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042b6:	e002      	b.n	80042be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3750      	adds	r7, #80	; 0x50
 80042c4:	46bd      	mov	sp, r7
 80042c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800
 80042d0:	00f42400 	.word	0x00f42400
 80042d4:	007a1200 	.word	0x007a1200

080042d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_RCC_GetHCLKFreq+0x14>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000020 	.word	0x20000020

080042f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042f4:	f7ff fff0 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0a9b      	lsrs	r3, r3, #10
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4903      	ldr	r1, [pc, #12]	; (8004314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40023800 	.word	0x40023800
 8004314:	08004b64 	.word	0x08004b64

08004318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800431c:	f7ff ffdc 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	0b5b      	lsrs	r3, r3, #13
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	4903      	ldr	r1, [pc, #12]	; (800433c <HAL_RCC_GetPCLK2Freq+0x24>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004334:	4618      	mov	r0, r3
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40023800 	.word	0x40023800
 800433c:	08004b64 	.word	0x08004b64

08004340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e03f      	b.n	80043d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fd fbfa 	bl	8001b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2224      	movs	r2, #36	; 0x24
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f829 	bl	80043dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695a      	ldr	r2, [r3, #20]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e0:	b0c0      	sub	sp, #256	; 0x100
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f8:	68d9      	ldr	r1, [r3, #12]
 80043fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	ea40 0301 	orr.w	r3, r0, r1
 8004404:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	431a      	orrs	r2, r3
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	431a      	orrs	r2, r3
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004434:	f021 010c 	bic.w	r1, r1, #12
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004442:	430b      	orrs	r3, r1
 8004444:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	6999      	ldr	r1, [r3, #24]
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	ea40 0301 	orr.w	r3, r0, r1
 8004462:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	4b8f      	ldr	r3, [pc, #572]	; (80046a8 <UART_SetConfig+0x2cc>)
 800446c:	429a      	cmp	r2, r3
 800446e:	d005      	beq.n	800447c <UART_SetConfig+0xa0>
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4b8d      	ldr	r3, [pc, #564]	; (80046ac <UART_SetConfig+0x2d0>)
 8004478:	429a      	cmp	r2, r3
 800447a:	d104      	bne.n	8004486 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800447c:	f7ff ff4c 	bl	8004318 <HAL_RCC_GetPCLK2Freq>
 8004480:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004484:	e003      	b.n	800448e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004486:	f7ff ff33 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 800448a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800448e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004498:	f040 810c 	bne.w	80046b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800449c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a0:	2200      	movs	r2, #0
 80044a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044ae:	4622      	mov	r2, r4
 80044b0:	462b      	mov	r3, r5
 80044b2:	1891      	adds	r1, r2, r2
 80044b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80044b6:	415b      	adcs	r3, r3
 80044b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044be:	4621      	mov	r1, r4
 80044c0:	eb12 0801 	adds.w	r8, r2, r1
 80044c4:	4629      	mov	r1, r5
 80044c6:	eb43 0901 	adc.w	r9, r3, r1
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044de:	4690      	mov	r8, r2
 80044e0:	4699      	mov	r9, r3
 80044e2:	4623      	mov	r3, r4
 80044e4:	eb18 0303 	adds.w	r3, r8, r3
 80044e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044ec:	462b      	mov	r3, r5
 80044ee:	eb49 0303 	adc.w	r3, r9, r3
 80044f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004502:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004506:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800450a:	460b      	mov	r3, r1
 800450c:	18db      	adds	r3, r3, r3
 800450e:	653b      	str	r3, [r7, #80]	; 0x50
 8004510:	4613      	mov	r3, r2
 8004512:	eb42 0303 	adc.w	r3, r2, r3
 8004516:	657b      	str	r3, [r7, #84]	; 0x54
 8004518:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800451c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004520:	f7fb fe58 	bl	80001d4 <__aeabi_uldivmod>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4b61      	ldr	r3, [pc, #388]	; (80046b0 <UART_SetConfig+0x2d4>)
 800452a:	fba3 2302 	umull	r2, r3, r3, r2
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	011c      	lsls	r4, r3, #4
 8004532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004536:	2200      	movs	r2, #0
 8004538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800453c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004540:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004544:	4642      	mov	r2, r8
 8004546:	464b      	mov	r3, r9
 8004548:	1891      	adds	r1, r2, r2
 800454a:	64b9      	str	r1, [r7, #72]	; 0x48
 800454c:	415b      	adcs	r3, r3
 800454e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004550:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004554:	4641      	mov	r1, r8
 8004556:	eb12 0a01 	adds.w	sl, r2, r1
 800455a:	4649      	mov	r1, r9
 800455c:	eb43 0b01 	adc.w	fp, r3, r1
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800456c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004570:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004574:	4692      	mov	sl, r2
 8004576:	469b      	mov	fp, r3
 8004578:	4643      	mov	r3, r8
 800457a:	eb1a 0303 	adds.w	r3, sl, r3
 800457e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004582:	464b      	mov	r3, r9
 8004584:	eb4b 0303 	adc.w	r3, fp, r3
 8004588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004598:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800459c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045a0:	460b      	mov	r3, r1
 80045a2:	18db      	adds	r3, r3, r3
 80045a4:	643b      	str	r3, [r7, #64]	; 0x40
 80045a6:	4613      	mov	r3, r2
 80045a8:	eb42 0303 	adc.w	r3, r2, r3
 80045ac:	647b      	str	r3, [r7, #68]	; 0x44
 80045ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045b6:	f7fb fe0d 	bl	80001d4 <__aeabi_uldivmod>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4611      	mov	r1, r2
 80045c0:	4b3b      	ldr	r3, [pc, #236]	; (80046b0 <UART_SetConfig+0x2d4>)
 80045c2:	fba3 2301 	umull	r2, r3, r3, r1
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2264      	movs	r2, #100	; 0x64
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	1acb      	subs	r3, r1, r3
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045d6:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <UART_SetConfig+0x2d4>)
 80045d8:	fba3 2302 	umull	r2, r3, r3, r2
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045e4:	441c      	add	r4, r3
 80045e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045f8:	4642      	mov	r2, r8
 80045fa:	464b      	mov	r3, r9
 80045fc:	1891      	adds	r1, r2, r2
 80045fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004600:	415b      	adcs	r3, r3
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004604:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004608:	4641      	mov	r1, r8
 800460a:	1851      	adds	r1, r2, r1
 800460c:	6339      	str	r1, [r7, #48]	; 0x30
 800460e:	4649      	mov	r1, r9
 8004610:	414b      	adcs	r3, r1
 8004612:	637b      	str	r3, [r7, #52]	; 0x34
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004620:	4659      	mov	r1, fp
 8004622:	00cb      	lsls	r3, r1, #3
 8004624:	4651      	mov	r1, sl
 8004626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800462a:	4651      	mov	r1, sl
 800462c:	00ca      	lsls	r2, r1, #3
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	4603      	mov	r3, r0
 8004634:	4642      	mov	r2, r8
 8004636:	189b      	adds	r3, r3, r2
 8004638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800463c:	464b      	mov	r3, r9
 800463e:	460a      	mov	r2, r1
 8004640:	eb42 0303 	adc.w	r3, r2, r3
 8004644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004654:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004658:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800465c:	460b      	mov	r3, r1
 800465e:	18db      	adds	r3, r3, r3
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
 8004662:	4613      	mov	r3, r2
 8004664:	eb42 0303 	adc.w	r3, r2, r3
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800466a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800466e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004672:	f7fb fdaf 	bl	80001d4 <__aeabi_uldivmod>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <UART_SetConfig+0x2d4>)
 800467c:	fba3 1302 	umull	r1, r3, r3, r2
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	2164      	movs	r1, #100	; 0x64
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	3332      	adds	r3, #50	; 0x32
 800468e:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <UART_SetConfig+0x2d4>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	f003 0207 	and.w	r2, r3, #7
 800469a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4422      	add	r2, r4
 80046a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046a4:	e105      	b.n	80048b2 <UART_SetConfig+0x4d6>
 80046a6:	bf00      	nop
 80046a8:	40011000 	.word	0x40011000
 80046ac:	40011400 	.word	0x40011400
 80046b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046c6:	4642      	mov	r2, r8
 80046c8:	464b      	mov	r3, r9
 80046ca:	1891      	adds	r1, r2, r2
 80046cc:	6239      	str	r1, [r7, #32]
 80046ce:	415b      	adcs	r3, r3
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
 80046d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046d6:	4641      	mov	r1, r8
 80046d8:	1854      	adds	r4, r2, r1
 80046da:	4649      	mov	r1, r9
 80046dc:	eb43 0501 	adc.w	r5, r3, r1
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	00eb      	lsls	r3, r5, #3
 80046ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ee:	00e2      	lsls	r2, r4, #3
 80046f0:	4614      	mov	r4, r2
 80046f2:	461d      	mov	r5, r3
 80046f4:	4643      	mov	r3, r8
 80046f6:	18e3      	adds	r3, r4, r3
 80046f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046fc:	464b      	mov	r3, r9
 80046fe:	eb45 0303 	adc.w	r3, r5, r3
 8004702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004722:	4629      	mov	r1, r5
 8004724:	008b      	lsls	r3, r1, #2
 8004726:	4621      	mov	r1, r4
 8004728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800472c:	4621      	mov	r1, r4
 800472e:	008a      	lsls	r2, r1, #2
 8004730:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004734:	f7fb fd4e 	bl	80001d4 <__aeabi_uldivmod>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4b60      	ldr	r3, [pc, #384]	; (80048c0 <UART_SetConfig+0x4e4>)
 800473e:	fba3 2302 	umull	r2, r3, r3, r2
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	011c      	lsls	r4, r3, #4
 8004746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800474a:	2200      	movs	r2, #0
 800474c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004750:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004754:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004758:	4642      	mov	r2, r8
 800475a:	464b      	mov	r3, r9
 800475c:	1891      	adds	r1, r2, r2
 800475e:	61b9      	str	r1, [r7, #24]
 8004760:	415b      	adcs	r3, r3
 8004762:	61fb      	str	r3, [r7, #28]
 8004764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004768:	4641      	mov	r1, r8
 800476a:	1851      	adds	r1, r2, r1
 800476c:	6139      	str	r1, [r7, #16]
 800476e:	4649      	mov	r1, r9
 8004770:	414b      	adcs	r3, r1
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004780:	4659      	mov	r1, fp
 8004782:	00cb      	lsls	r3, r1, #3
 8004784:	4651      	mov	r1, sl
 8004786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800478a:	4651      	mov	r1, sl
 800478c:	00ca      	lsls	r2, r1, #3
 800478e:	4610      	mov	r0, r2
 8004790:	4619      	mov	r1, r3
 8004792:	4603      	mov	r3, r0
 8004794:	4642      	mov	r2, r8
 8004796:	189b      	adds	r3, r3, r2
 8004798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800479c:	464b      	mov	r3, r9
 800479e:	460a      	mov	r2, r1
 80047a0:	eb42 0303 	adc.w	r3, r2, r3
 80047a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80047b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047c0:	4649      	mov	r1, r9
 80047c2:	008b      	lsls	r3, r1, #2
 80047c4:	4641      	mov	r1, r8
 80047c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ca:	4641      	mov	r1, r8
 80047cc:	008a      	lsls	r2, r1, #2
 80047ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047d2:	f7fb fcff 	bl	80001d4 <__aeabi_uldivmod>
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <UART_SetConfig+0x4e4>)
 80047dc:	fba3 1302 	umull	r1, r3, r3, r2
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	2164      	movs	r1, #100	; 0x64
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	3332      	adds	r3, #50	; 0x32
 80047ee:	4a34      	ldr	r2, [pc, #208]	; (80048c0 <UART_SetConfig+0x4e4>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047fa:	441c      	add	r4, r3
 80047fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004800:	2200      	movs	r2, #0
 8004802:	673b      	str	r3, [r7, #112]	; 0x70
 8004804:	677a      	str	r2, [r7, #116]	; 0x74
 8004806:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800480a:	4642      	mov	r2, r8
 800480c:	464b      	mov	r3, r9
 800480e:	1891      	adds	r1, r2, r2
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	415b      	adcs	r3, r3
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800481a:	4641      	mov	r1, r8
 800481c:	1851      	adds	r1, r2, r1
 800481e:	6039      	str	r1, [r7, #0]
 8004820:	4649      	mov	r1, r9
 8004822:	414b      	adcs	r3, r1
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004832:	4659      	mov	r1, fp
 8004834:	00cb      	lsls	r3, r1, #3
 8004836:	4651      	mov	r1, sl
 8004838:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800483c:	4651      	mov	r1, sl
 800483e:	00ca      	lsls	r2, r1, #3
 8004840:	4610      	mov	r0, r2
 8004842:	4619      	mov	r1, r3
 8004844:	4603      	mov	r3, r0
 8004846:	4642      	mov	r2, r8
 8004848:	189b      	adds	r3, r3, r2
 800484a:	66bb      	str	r3, [r7, #104]	; 0x68
 800484c:	464b      	mov	r3, r9
 800484e:	460a      	mov	r2, r1
 8004850:	eb42 0303 	adc.w	r3, r2, r3
 8004854:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	663b      	str	r3, [r7, #96]	; 0x60
 8004860:	667a      	str	r2, [r7, #100]	; 0x64
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800486e:	4649      	mov	r1, r9
 8004870:	008b      	lsls	r3, r1, #2
 8004872:	4641      	mov	r1, r8
 8004874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004878:	4641      	mov	r1, r8
 800487a:	008a      	lsls	r2, r1, #2
 800487c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004880:	f7fb fca8 	bl	80001d4 <__aeabi_uldivmod>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <UART_SetConfig+0x4e4>)
 800488a:	fba3 1302 	umull	r1, r3, r3, r2
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2164      	movs	r1, #100	; 0x64
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	3332      	adds	r3, #50	; 0x32
 800489c:	4a08      	ldr	r2, [pc, #32]	; (80048c0 <UART_SetConfig+0x4e4>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	f003 020f 	and.w	r2, r3, #15
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4422      	add	r2, r4
 80048b0:	609a      	str	r2, [r3, #8]
}
 80048b2:	bf00      	nop
 80048b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048b8:	46bd      	mov	sp, r7
 80048ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048be:	bf00      	nop
 80048c0:	51eb851f 	.word	0x51eb851f

080048c4 <__libc_init_array>:
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	4d0d      	ldr	r5, [pc, #52]	; (80048fc <__libc_init_array+0x38>)
 80048c8:	4c0d      	ldr	r4, [pc, #52]	; (8004900 <__libc_init_array+0x3c>)
 80048ca:	1b64      	subs	r4, r4, r5
 80048cc:	10a4      	asrs	r4, r4, #2
 80048ce:	2600      	movs	r6, #0
 80048d0:	42a6      	cmp	r6, r4
 80048d2:	d109      	bne.n	80048e8 <__libc_init_array+0x24>
 80048d4:	4d0b      	ldr	r5, [pc, #44]	; (8004904 <__libc_init_array+0x40>)
 80048d6:	4c0c      	ldr	r4, [pc, #48]	; (8004908 <__libc_init_array+0x44>)
 80048d8:	f000 f87c 	bl	80049d4 <_init>
 80048dc:	1b64      	subs	r4, r4, r5
 80048de:	10a4      	asrs	r4, r4, #2
 80048e0:	2600      	movs	r6, #0
 80048e2:	42a6      	cmp	r6, r4
 80048e4:	d105      	bne.n	80048f2 <__libc_init_array+0x2e>
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ec:	4798      	blx	r3
 80048ee:	3601      	adds	r6, #1
 80048f0:	e7ee      	b.n	80048d0 <__libc_init_array+0xc>
 80048f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f6:	4798      	blx	r3
 80048f8:	3601      	adds	r6, #1
 80048fa:	e7f2      	b.n	80048e2 <__libc_init_array+0x1e>
 80048fc:	08004b9c 	.word	0x08004b9c
 8004900:	08004b9c 	.word	0x08004b9c
 8004904:	08004b9c 	.word	0x08004b9c
 8004908:	08004ba0 	.word	0x08004ba0

0800490c <__itoa>:
 800490c:	1e93      	subs	r3, r2, #2
 800490e:	2b22      	cmp	r3, #34	; 0x22
 8004910:	b510      	push	{r4, lr}
 8004912:	460c      	mov	r4, r1
 8004914:	d904      	bls.n	8004920 <__itoa+0x14>
 8004916:	2300      	movs	r3, #0
 8004918:	700b      	strb	r3, [r1, #0]
 800491a:	461c      	mov	r4, r3
 800491c:	4620      	mov	r0, r4
 800491e:	bd10      	pop	{r4, pc}
 8004920:	2a0a      	cmp	r2, #10
 8004922:	d109      	bne.n	8004938 <__itoa+0x2c>
 8004924:	2800      	cmp	r0, #0
 8004926:	da07      	bge.n	8004938 <__itoa+0x2c>
 8004928:	232d      	movs	r3, #45	; 0x2d
 800492a:	700b      	strb	r3, [r1, #0]
 800492c:	4240      	negs	r0, r0
 800492e:	2101      	movs	r1, #1
 8004930:	4421      	add	r1, r4
 8004932:	f000 f80d 	bl	8004950 <__utoa>
 8004936:	e7f1      	b.n	800491c <__itoa+0x10>
 8004938:	2100      	movs	r1, #0
 800493a:	e7f9      	b.n	8004930 <__itoa+0x24>

0800493c <itoa>:
 800493c:	f7ff bfe6 	b.w	800490c <__itoa>

08004940 <memset>:
 8004940:	4402      	add	r2, r0
 8004942:	4603      	mov	r3, r0
 8004944:	4293      	cmp	r3, r2
 8004946:	d100      	bne.n	800494a <memset+0xa>
 8004948:	4770      	bx	lr
 800494a:	f803 1b01 	strb.w	r1, [r3], #1
 800494e:	e7f9      	b.n	8004944 <memset+0x4>

08004950 <__utoa>:
 8004950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004952:	4c1f      	ldr	r4, [pc, #124]	; (80049d0 <__utoa+0x80>)
 8004954:	b08b      	sub	sp, #44	; 0x2c
 8004956:	4605      	mov	r5, r0
 8004958:	460b      	mov	r3, r1
 800495a:	466e      	mov	r6, sp
 800495c:	f104 0c20 	add.w	ip, r4, #32
 8004960:	6820      	ldr	r0, [r4, #0]
 8004962:	6861      	ldr	r1, [r4, #4]
 8004964:	4637      	mov	r7, r6
 8004966:	c703      	stmia	r7!, {r0, r1}
 8004968:	3408      	adds	r4, #8
 800496a:	4564      	cmp	r4, ip
 800496c:	463e      	mov	r6, r7
 800496e:	d1f7      	bne.n	8004960 <__utoa+0x10>
 8004970:	7921      	ldrb	r1, [r4, #4]
 8004972:	7139      	strb	r1, [r7, #4]
 8004974:	1e91      	subs	r1, r2, #2
 8004976:	6820      	ldr	r0, [r4, #0]
 8004978:	6038      	str	r0, [r7, #0]
 800497a:	2922      	cmp	r1, #34	; 0x22
 800497c:	f04f 0100 	mov.w	r1, #0
 8004980:	d904      	bls.n	800498c <__utoa+0x3c>
 8004982:	7019      	strb	r1, [r3, #0]
 8004984:	460b      	mov	r3, r1
 8004986:	4618      	mov	r0, r3
 8004988:	b00b      	add	sp, #44	; 0x2c
 800498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800498c:	1e58      	subs	r0, r3, #1
 800498e:	4684      	mov	ip, r0
 8004990:	fbb5 f7f2 	udiv	r7, r5, r2
 8004994:	fb02 5617 	mls	r6, r2, r7, r5
 8004998:	3628      	adds	r6, #40	; 0x28
 800499a:	446e      	add	r6, sp
 800499c:	460c      	mov	r4, r1
 800499e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80049a2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80049a6:	462e      	mov	r6, r5
 80049a8:	42b2      	cmp	r2, r6
 80049aa:	f101 0101 	add.w	r1, r1, #1
 80049ae:	463d      	mov	r5, r7
 80049b0:	d9ee      	bls.n	8004990 <__utoa+0x40>
 80049b2:	2200      	movs	r2, #0
 80049b4:	545a      	strb	r2, [r3, r1]
 80049b6:	1919      	adds	r1, r3, r4
 80049b8:	1aa5      	subs	r5, r4, r2
 80049ba:	42aa      	cmp	r2, r5
 80049bc:	dae3      	bge.n	8004986 <__utoa+0x36>
 80049be:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80049c2:	780e      	ldrb	r6, [r1, #0]
 80049c4:	7006      	strb	r6, [r0, #0]
 80049c6:	3201      	adds	r2, #1
 80049c8:	f801 5901 	strb.w	r5, [r1], #-1
 80049cc:	e7f4      	b.n	80049b8 <__utoa+0x68>
 80049ce:	bf00      	nop
 80049d0:	08004b6c 	.word	0x08004b6c

080049d4 <_init>:
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	bf00      	nop
 80049d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049da:	bc08      	pop	{r3}
 80049dc:	469e      	mov	lr, r3
 80049de:	4770      	bx	lr

080049e0 <_fini>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	bf00      	nop
 80049e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e6:	bc08      	pop	{r3}
 80049e8:	469e      	mov	lr, r3
 80049ea:	4770      	bx	lr
